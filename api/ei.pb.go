// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: ei.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Platform int32

const (
	Platform_INVALID_PLATFORM Platform = 0 // proto3 requires first enum value to be 0.
	Platform_IOS              Platform = 1
	Platform_DROID            Platform = 2
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "INVALID_PLATFORM",
		1: "IOS",
		2: "DROID",
	}
	Platform_value = map[string]int32{
		"INVALID_PLATFORM": 0,
		"IOS":              1,
		"DROID":            2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{0}
}

type EggType int32

const (
	EggType_INVALID_EGG    EggType = 0 // proto3 requires first enum value to be 0.
	EggType_EDIBLE         EggType = 1
	EggType_SUPERFOOD      EggType = 2
	EggType_MEDICAL        EggType = 3
	EggType_ROCKET_FUEL    EggType = 4
	EggType_SUPER_MATERIAL EggType = 5
	EggType_FUSION         EggType = 6
	EggType_QUANTUM        EggType = 7
	EggType_IMMORTALITY    EggType = 8
	EggType_TACHYON        EggType = 9
	EggType_GRAVITON       EggType = 10
	EggType_DILITHIUM      EggType = 11
	EggType_PRODIGY        EggType = 12
	EggType_TERRAFORM      EggType = 13
	EggType_ANTIMATTER     EggType = 14
	EggType_DARK_MATTER    EggType = 15
	EggType_AI             EggType = 16
	EggType_NEBULA         EggType = 17
	EggType_UNIVERSE       EggType = 18
	EggType_ENLIGHTENMENT  EggType = 19
	// Contract-only eggs.
	EggType_CHOCOLATE    EggType = 100
	EggType_EASTER       EggType = 101
	EggType_WATERBALLOON EggType = 102
	EggType_FIREWORK     EggType = 103
	EggType_PUMPKIN      EggType = 104
	// Placeholder for undiscovered eggs.
	EggType_UNKNOWN EggType = 1000
)

// Enum value maps for EggType.
var (
	EggType_name = map[int32]string{
		0:    "INVALID_EGG",
		1:    "EDIBLE",
		2:    "SUPERFOOD",
		3:    "MEDICAL",
		4:    "ROCKET_FUEL",
		5:    "SUPER_MATERIAL",
		6:    "FUSION",
		7:    "QUANTUM",
		8:    "IMMORTALITY",
		9:    "TACHYON",
		10:   "GRAVITON",
		11:   "DILITHIUM",
		12:   "PRODIGY",
		13:   "TERRAFORM",
		14:   "ANTIMATTER",
		15:   "DARK_MATTER",
		16:   "AI",
		17:   "NEBULA",
		18:   "UNIVERSE",
		19:   "ENLIGHTENMENT",
		100:  "CHOCOLATE",
		101:  "EASTER",
		102:  "WATERBALLOON",
		103:  "FIREWORK",
		104:  "PUMPKIN",
		1000: "UNKNOWN",
	}
	EggType_value = map[string]int32{
		"INVALID_EGG":    0,
		"EDIBLE":         1,
		"SUPERFOOD":      2,
		"MEDICAL":        3,
		"ROCKET_FUEL":    4,
		"SUPER_MATERIAL": 5,
		"FUSION":         6,
		"QUANTUM":        7,
		"IMMORTALITY":    8,
		"TACHYON":        9,
		"GRAVITON":       10,
		"DILITHIUM":      11,
		"PRODIGY":        12,
		"TERRAFORM":      13,
		"ANTIMATTER":     14,
		"DARK_MATTER":    15,
		"AI":             16,
		"NEBULA":         17,
		"UNIVERSE":       18,
		"ENLIGHTENMENT":  19,
		"CHOCOLATE":      100,
		"EASTER":         101,
		"WATERBALLOON":   102,
		"FIREWORK":       103,
		"PUMPKIN":        104,
		"UNKNOWN":        1000,
	}
)

func (x EggType) Enum() *EggType {
	p := new(EggType)
	*p = x
	return p
}

func (x EggType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EggType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[1].Descriptor()
}

func (EggType) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[1]
}

func (x EggType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EggType.Descriptor instead.
func (EggType) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{1}
}

type VehicleType int32

const (
	VehicleType_TRIKE               VehicleType = 0
	VehicleType_TRANSIT_VAN         VehicleType = 1
	VehicleType_PICKUP              VehicleType = 2
	VehicleType_TEN_FOOT            VehicleType = 3
	VehicleType_TWENTY_FOUR_FOOT    VehicleType = 4
	VehicleType_SEMI                VehicleType = 5
	VehicleType_DOUBLE_SEMI         VehicleType = 6
	VehicleType_FUTURE_SEMI         VehicleType = 7
	VehicleType_MEGA_SEMI           VehicleType = 8
	VehicleType_HOVER_SEMI          VehicleType = 9
	VehicleType_QUANTUM_TRANSPORTER VehicleType = 10
	VehicleType_HYPERLOOP_TRAIN     VehicleType = 11
)

// Enum value maps for VehicleType.
var (
	VehicleType_name = map[int32]string{
		0:  "TRIKE",
		1:  "TRANSIT_VAN",
		2:  "PICKUP",
		3:  "TEN_FOOT",
		4:  "TWENTY_FOUR_FOOT",
		5:  "SEMI",
		6:  "DOUBLE_SEMI",
		7:  "FUTURE_SEMI",
		8:  "MEGA_SEMI",
		9:  "HOVER_SEMI",
		10: "QUANTUM_TRANSPORTER",
		11: "HYPERLOOP_TRAIN",
	}
	VehicleType_value = map[string]int32{
		"TRIKE":               0,
		"TRANSIT_VAN":         1,
		"PICKUP":              2,
		"TEN_FOOT":            3,
		"TWENTY_FOUR_FOOT":    4,
		"SEMI":                5,
		"DOUBLE_SEMI":         6,
		"FUTURE_SEMI":         7,
		"MEGA_SEMI":           8,
		"HOVER_SEMI":          9,
		"QUANTUM_TRANSPORTER": 10,
		"HYPERLOOP_TRAIN":     11,
	}
)

func (x VehicleType) Enum() *VehicleType {
	p := new(VehicleType)
	*p = x
	return p
}

func (x VehicleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[2].Descriptor()
}

func (VehicleType) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[2]
}

func (x VehicleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleType.Descriptor instead.
func (VehicleType) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{2}
}

type TrophyType int32

const (
	TrophyType_NO_TROPHY TrophyType = 0
	TrophyType_BRONZE    TrophyType = 1
	TrophyType_SILVER    TrophyType = 2
	TrophyType_GOLD      TrophyType = 3
	TrophyType_PLATINUM  TrophyType = 4
	TrophyType_DIAMOND   TrophyType = 5
)

// Enum value maps for TrophyType.
var (
	TrophyType_name = map[int32]string{
		0: "NO_TROPHY",
		1: "BRONZE",
		2: "SILVER",
		3: "GOLD",
		4: "PLATINUM",
		5: "DIAMOND",
	}
	TrophyType_value = map[string]int32{
		"NO_TROPHY": 0,
		"BRONZE":    1,
		"SILVER":    2,
		"GOLD":      3,
		"PLATINUM":  4,
		"DIAMOND":   5,
	}
)

func (x TrophyType) Enum() *TrophyType {
	p := new(TrophyType)
	*p = x
	return p
}

func (x TrophyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrophyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[3].Descriptor()
}

func (TrophyType) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[3]
}

func (x TrophyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrophyType.Descriptor instead.
func (TrophyType) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3}
}

type RewardType int32

const (
	RewardType_INVALID_REWARD RewardType = 0 // proto3 requires first enum value to be 0.
	// Never encountered 1.
	RewardType_GOLDEN_EGG       RewardType = 2
	RewardType_SOUL_EGG         RewardType = 3
	RewardType_PROPHECY_EGG     RewardType = 4
	RewardType_EPIC_RESEARCH    RewardType = 5
	RewardType_PIGGY_GOLDEN_EGG RewardType = 6
	RewardType_PIGGY_MULTIPLY   RewardType = 7 // e.g. xmas-trash "Quantum Trash Bag"
	// (type:7, name:"subtype", count:2)
	RewardType_PIGGY_LEVEL_UP RewardType = 8
	RewardType_BOOST          RewardType = 9
	RewardType_BOOST_TOKEN    RewardType = 10
	RewardType_ARTIFACT       RewardType = 11
	RewardType_ARTIFACT_CASE  RewardType = 12
	RewardType_UNKNOWN_REWARD RewardType = 100
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0:   "INVALID_REWARD",
		2:   "GOLDEN_EGG",
		3:   "SOUL_EGG",
		4:   "PROPHECY_EGG",
		5:   "EPIC_RESEARCH",
		6:   "PIGGY_GOLDEN_EGG",
		7:   "PIGGY_MULTIPLY",
		8:   "PIGGY_LEVEL_UP",
		9:   "BOOST",
		10:  "BOOST_TOKEN",
		11:  "ARTIFACT",
		12:  "ARTIFACT_CASE",
		100: "UNKNOWN_REWARD",
	}
	RewardType_value = map[string]int32{
		"INVALID_REWARD":   0,
		"GOLDEN_EGG":       2,
		"SOUL_EGG":         3,
		"PROPHECY_EGG":     4,
		"EPIC_RESEARCH":    5,
		"PIGGY_GOLDEN_EGG": 6,
		"PIGGY_MULTIPLY":   7,
		"PIGGY_LEVEL_UP":   8,
		"BOOST":            9,
		"BOOST_TOKEN":      10,
		"ARTIFACT":         11,
		"ARTIFACT_CASE":    12,
		"UNKNOWN_REWARD":   100,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[4].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[4]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{4}
}

type ArtifactSpec_Name int32

const (
	ArtifactSpec_LUNAR_TOTEM               ArtifactSpec_Name = 0
	ArtifactSpec_NEODYMIUM_MEDALLION       ArtifactSpec_Name = 3
	ArtifactSpec_BEAK_OF_MIDAS             ArtifactSpec_Name = 4
	ArtifactSpec_LIGHT_OF_EGGENDIL         ArtifactSpec_Name = 5
	ArtifactSpec_DEMETERS_NECKLACE         ArtifactSpec_Name = 6
	ArtifactSpec_VIAL_MARTIAN_DUST         ArtifactSpec_Name = 7
	ArtifactSpec_ORNATE_GUSSET             ArtifactSpec_Name = 8
	ArtifactSpec_THE_CHALICE               ArtifactSpec_Name = 9
	ArtifactSpec_BOOK_OF_BASAN             ArtifactSpec_Name = 10
	ArtifactSpec_PHOENIX_FEATHER           ArtifactSpec_Name = 11
	ArtifactSpec_TUNGSTEN_ANKH             ArtifactSpec_Name = 12
	ArtifactSpec_AURELIAN_BROOCH           ArtifactSpec_Name = 21
	ArtifactSpec_CARVED_RAINSTICK          ArtifactSpec_Name = 22
	ArtifactSpec_PUZZLE_CUBE               ArtifactSpec_Name = 23
	ArtifactSpec_QUANTUM_METRONOME         ArtifactSpec_Name = 24
	ArtifactSpec_SHIP_IN_A_BOTTLE          ArtifactSpec_Name = 25
	ArtifactSpec_TACHYON_DEFLECTOR         ArtifactSpec_Name = 26
	ArtifactSpec_INTERSTELLAR_COMPASS      ArtifactSpec_Name = 27
	ArtifactSpec_DILITHIUM_MONOCLE         ArtifactSpec_Name = 28
	ArtifactSpec_TITANIUM_ACTUATOR         ArtifactSpec_Name = 29
	ArtifactSpec_MERCURYS_LENS             ArtifactSpec_Name = 30
	ArtifactSpec_TACHYON_STONE             ArtifactSpec_Name = 1
	ArtifactSpec_DILITHIUM_STONE           ArtifactSpec_Name = 31
	ArtifactSpec_SHELL_STONE               ArtifactSpec_Name = 32
	ArtifactSpec_LUNAR_STONE               ArtifactSpec_Name = 33
	ArtifactSpec_SOUL_STONE                ArtifactSpec_Name = 34
	ArtifactSpec_PROPHECY_STONE            ArtifactSpec_Name = 39
	ArtifactSpec_QUANTUM_STONE             ArtifactSpec_Name = 36
	ArtifactSpec_TERRA_STONE               ArtifactSpec_Name = 37
	ArtifactSpec_LIFE_STONE                ArtifactSpec_Name = 38
	ArtifactSpec_CLARITY_STONE             ArtifactSpec_Name = 40
	ArtifactSpec_EXTRATERRESTRIAL_ALUMINUM ArtifactSpec_Name = 13
	ArtifactSpec_ANCIENT_TUNGSTEN          ArtifactSpec_Name = 14
	ArtifactSpec_SPACE_ROCKS               ArtifactSpec_Name = 15
	ArtifactSpec_ALIEN_WOOD                ArtifactSpec_Name = 16
	ArtifactSpec_GOLD_METEORITE            ArtifactSpec_Name = 17
	ArtifactSpec_TAU_CETI_GEODE            ArtifactSpec_Name = 18
	ArtifactSpec_CENTAURIAN_STEEL          ArtifactSpec_Name = 19
	ArtifactSpec_ERIDANI_FEATHER           ArtifactSpec_Name = 20
	ArtifactSpec_DRONE_PARTS               ArtifactSpec_Name = 35
	ArtifactSpec_CELESTIAL_BRONZE          ArtifactSpec_Name = 41
	ArtifactSpec_LALANDE_HIDE              ArtifactSpec_Name = 42
	ArtifactSpec_SOLAR_TITANIUM            ArtifactSpec_Name = 43
	ArtifactSpec_TACHYON_STONE_FRAGMENT    ArtifactSpec_Name = 2
	ArtifactSpec_DILITHIUM_STONE_FRAGMENT  ArtifactSpec_Name = 44
	ArtifactSpec_SHELL_STONE_FRAGMENT      ArtifactSpec_Name = 45
	ArtifactSpec_LUNAR_STONE_FRAGMENT      ArtifactSpec_Name = 46
	ArtifactSpec_SOUL_STONE_FRAGMENT       ArtifactSpec_Name = 47
	ArtifactSpec_PROPHECY_STONE_FRAGMENT   ArtifactSpec_Name = 48
	ArtifactSpec_QUANTUM_STONE_FRAGMENT    ArtifactSpec_Name = 49
	ArtifactSpec_TERRA_STONE_FRAGMENT      ArtifactSpec_Name = 50
	ArtifactSpec_LIFE_STONE_FRAGMENT       ArtifactSpec_Name = 51
	ArtifactSpec_CLARITY_STONE_FRAGMENT    ArtifactSpec_Name = 52
	ArtifactSpec_UNKNOWN                   ArtifactSpec_Name = 10000
)

// Enum value maps for ArtifactSpec_Name.
var (
	ArtifactSpec_Name_name = map[int32]string{
		0:     "LUNAR_TOTEM",
		3:     "NEODYMIUM_MEDALLION",
		4:     "BEAK_OF_MIDAS",
		5:     "LIGHT_OF_EGGENDIL",
		6:     "DEMETERS_NECKLACE",
		7:     "VIAL_MARTIAN_DUST",
		8:     "ORNATE_GUSSET",
		9:     "THE_CHALICE",
		10:    "BOOK_OF_BASAN",
		11:    "PHOENIX_FEATHER",
		12:    "TUNGSTEN_ANKH",
		21:    "AURELIAN_BROOCH",
		22:    "CARVED_RAINSTICK",
		23:    "PUZZLE_CUBE",
		24:    "QUANTUM_METRONOME",
		25:    "SHIP_IN_A_BOTTLE",
		26:    "TACHYON_DEFLECTOR",
		27:    "INTERSTELLAR_COMPASS",
		28:    "DILITHIUM_MONOCLE",
		29:    "TITANIUM_ACTUATOR",
		30:    "MERCURYS_LENS",
		1:     "TACHYON_STONE",
		31:    "DILITHIUM_STONE",
		32:    "SHELL_STONE",
		33:    "LUNAR_STONE",
		34:    "SOUL_STONE",
		39:    "PROPHECY_STONE",
		36:    "QUANTUM_STONE",
		37:    "TERRA_STONE",
		38:    "LIFE_STONE",
		40:    "CLARITY_STONE",
		13:    "EXTRATERRESTRIAL_ALUMINUM",
		14:    "ANCIENT_TUNGSTEN",
		15:    "SPACE_ROCKS",
		16:    "ALIEN_WOOD",
		17:    "GOLD_METEORITE",
		18:    "TAU_CETI_GEODE",
		19:    "CENTAURIAN_STEEL",
		20:    "ERIDANI_FEATHER",
		35:    "DRONE_PARTS",
		41:    "CELESTIAL_BRONZE",
		42:    "LALANDE_HIDE",
		43:    "SOLAR_TITANIUM",
		2:     "TACHYON_STONE_FRAGMENT",
		44:    "DILITHIUM_STONE_FRAGMENT",
		45:    "SHELL_STONE_FRAGMENT",
		46:    "LUNAR_STONE_FRAGMENT",
		47:    "SOUL_STONE_FRAGMENT",
		48:    "PROPHECY_STONE_FRAGMENT",
		49:    "QUANTUM_STONE_FRAGMENT",
		50:    "TERRA_STONE_FRAGMENT",
		51:    "LIFE_STONE_FRAGMENT",
		52:    "CLARITY_STONE_FRAGMENT",
		10000: "UNKNOWN",
	}
	ArtifactSpec_Name_value = map[string]int32{
		"LUNAR_TOTEM":               0,
		"NEODYMIUM_MEDALLION":       3,
		"BEAK_OF_MIDAS":             4,
		"LIGHT_OF_EGGENDIL":         5,
		"DEMETERS_NECKLACE":         6,
		"VIAL_MARTIAN_DUST":         7,
		"ORNATE_GUSSET":             8,
		"THE_CHALICE":               9,
		"BOOK_OF_BASAN":             10,
		"PHOENIX_FEATHER":           11,
		"TUNGSTEN_ANKH":             12,
		"AURELIAN_BROOCH":           21,
		"CARVED_RAINSTICK":          22,
		"PUZZLE_CUBE":               23,
		"QUANTUM_METRONOME":         24,
		"SHIP_IN_A_BOTTLE":          25,
		"TACHYON_DEFLECTOR":         26,
		"INTERSTELLAR_COMPASS":      27,
		"DILITHIUM_MONOCLE":         28,
		"TITANIUM_ACTUATOR":         29,
		"MERCURYS_LENS":             30,
		"TACHYON_STONE":             1,
		"DILITHIUM_STONE":           31,
		"SHELL_STONE":               32,
		"LUNAR_STONE":               33,
		"SOUL_STONE":                34,
		"PROPHECY_STONE":            39,
		"QUANTUM_STONE":             36,
		"TERRA_STONE":               37,
		"LIFE_STONE":                38,
		"CLARITY_STONE":             40,
		"EXTRATERRESTRIAL_ALUMINUM": 13,
		"ANCIENT_TUNGSTEN":          14,
		"SPACE_ROCKS":               15,
		"ALIEN_WOOD":                16,
		"GOLD_METEORITE":            17,
		"TAU_CETI_GEODE":            18,
		"CENTAURIAN_STEEL":          19,
		"ERIDANI_FEATHER":           20,
		"DRONE_PARTS":               35,
		"CELESTIAL_BRONZE":          41,
		"LALANDE_HIDE":              42,
		"SOLAR_TITANIUM":            43,
		"TACHYON_STONE_FRAGMENT":    2,
		"DILITHIUM_STONE_FRAGMENT":  44,
		"SHELL_STONE_FRAGMENT":      45,
		"LUNAR_STONE_FRAGMENT":      46,
		"SOUL_STONE_FRAGMENT":       47,
		"PROPHECY_STONE_FRAGMENT":   48,
		"QUANTUM_STONE_FRAGMENT":    49,
		"TERRA_STONE_FRAGMENT":      50,
		"LIFE_STONE_FRAGMENT":       51,
		"CLARITY_STONE_FRAGMENT":    52,
		"UNKNOWN":                   10000,
	}
)

func (x ArtifactSpec_Name) Enum() *ArtifactSpec_Name {
	p := new(ArtifactSpec_Name)
	*p = x
	return p
}

func (x ArtifactSpec_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[5].Descriptor()
}

func (ArtifactSpec_Name) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[5]
}

func (x ArtifactSpec_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactSpec_Name.Descriptor instead.
func (ArtifactSpec_Name) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{11, 0}
}

type ArtifactSpec_Level int32

const (
	ArtifactSpec_INFERIOR ArtifactSpec_Level = 0
	ArtifactSpec_LESSER   ArtifactSpec_Level = 1
	ArtifactSpec_NORMAL   ArtifactSpec_Level = 2
	ArtifactSpec_GREATER  ArtifactSpec_Level = 3
	ArtifactSpec_SUPERIOR ArtifactSpec_Level = 4
)

// Enum value maps for ArtifactSpec_Level.
var (
	ArtifactSpec_Level_name = map[int32]string{
		0: "INFERIOR",
		1: "LESSER",
		2: "NORMAL",
		3: "GREATER",
		4: "SUPERIOR",
	}
	ArtifactSpec_Level_value = map[string]int32{
		"INFERIOR": 0,
		"LESSER":   1,
		"NORMAL":   2,
		"GREATER":  3,
		"SUPERIOR": 4,
	}
)

func (x ArtifactSpec_Level) Enum() *ArtifactSpec_Level {
	p := new(ArtifactSpec_Level)
	*p = x
	return p
}

func (x ArtifactSpec_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[6].Descriptor()
}

func (ArtifactSpec_Level) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[6]
}

func (x ArtifactSpec_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactSpec_Level.Descriptor instead.
func (ArtifactSpec_Level) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{11, 1}
}

type ArtifactSpec_Rarity int32

const (
	ArtifactSpec_COMMON    ArtifactSpec_Rarity = 0
	ArtifactSpec_RARE      ArtifactSpec_Rarity = 1
	ArtifactSpec_EPIC      ArtifactSpec_Rarity = 2
	ArtifactSpec_LEGENDARY ArtifactSpec_Rarity = 3
)

// Enum value maps for ArtifactSpec_Rarity.
var (
	ArtifactSpec_Rarity_name = map[int32]string{
		0: "COMMON",
		1: "RARE",
		2: "EPIC",
		3: "LEGENDARY",
	}
	ArtifactSpec_Rarity_value = map[string]int32{
		"COMMON":    0,
		"RARE":      1,
		"EPIC":      2,
		"LEGENDARY": 3,
	}
)

func (x ArtifactSpec_Rarity) Enum() *ArtifactSpec_Rarity {
	p := new(ArtifactSpec_Rarity)
	*p = x
	return p
}

func (x ArtifactSpec_Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[7].Descriptor()
}

func (ArtifactSpec_Rarity) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[7]
}

func (x ArtifactSpec_Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactSpec_Rarity.Descriptor instead.
func (ArtifactSpec_Rarity) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{11, 2}
}

type ArtifactSpec_Type int32

const (
	ArtifactSpec_ARTIFACT         ArtifactSpec_Type = 0
	ArtifactSpec_STONE            ArtifactSpec_Type = 1
	ArtifactSpec_INGREDIENT       ArtifactSpec_Type = 2
	ArtifactSpec_STONE_INGREDIENT ArtifactSpec_Type = 3
)

// Enum value maps for ArtifactSpec_Type.
var (
	ArtifactSpec_Type_name = map[int32]string{
		0: "ARTIFACT",
		1: "STONE",
		2: "INGREDIENT",
		3: "STONE_INGREDIENT",
	}
	ArtifactSpec_Type_value = map[string]int32{
		"ARTIFACT":         0,
		"STONE":            1,
		"INGREDIENT":       2,
		"STONE_INGREDIENT": 3,
	}
)

func (x ArtifactSpec_Type) Enum() *ArtifactSpec_Type {
	p := new(ArtifactSpec_Type)
	*p = x
	return p
}

func (x ArtifactSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[8].Descriptor()
}

func (ArtifactSpec_Type) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[8]
}

func (x ArtifactSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactSpec_Type.Descriptor instead.
func (ArtifactSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{11, 3}
}

type MissionInfo_Spaceship int32

const (
	MissionInfo_CHICKEN_ONE         MissionInfo_Spaceship = 0
	MissionInfo_CHICKEN_NINE        MissionInfo_Spaceship = 1
	MissionInfo_CHICKEN_HEAVY       MissionInfo_Spaceship = 2
	MissionInfo_BCR                 MissionInfo_Spaceship = 3
	MissionInfo_MILLENIUM_CHICKEN   MissionInfo_Spaceship = 4
	MissionInfo_CORELLIHEN_CORVETTE MissionInfo_Spaceship = 5
	MissionInfo_GALEGGTICA          MissionInfo_Spaceship = 6
	MissionInfo_CHICKFIANT          MissionInfo_Spaceship = 7
	MissionInfo_VOYEGGER            MissionInfo_Spaceship = 8
	MissionInfo_HENERPRISE          MissionInfo_Spaceship = 9
)

// Enum value maps for MissionInfo_Spaceship.
var (
	MissionInfo_Spaceship_name = map[int32]string{
		0: "CHICKEN_ONE",
		1: "CHICKEN_NINE",
		2: "CHICKEN_HEAVY",
		3: "BCR",
		4: "MILLENIUM_CHICKEN",
		5: "CORELLIHEN_CORVETTE",
		6: "GALEGGTICA",
		7: "CHICKFIANT",
		8: "VOYEGGER",
		9: "HENERPRISE",
	}
	MissionInfo_Spaceship_value = map[string]int32{
		"CHICKEN_ONE":         0,
		"CHICKEN_NINE":        1,
		"CHICKEN_HEAVY":       2,
		"BCR":                 3,
		"MILLENIUM_CHICKEN":   4,
		"CORELLIHEN_CORVETTE": 5,
		"GALEGGTICA":          6,
		"CHICKFIANT":          7,
		"VOYEGGER":            8,
		"HENERPRISE":          9,
	}
)

func (x MissionInfo_Spaceship) Enum() *MissionInfo_Spaceship {
	p := new(MissionInfo_Spaceship)
	*p = x
	return p
}

func (x MissionInfo_Spaceship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Spaceship) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[9].Descriptor()
}

func (MissionInfo_Spaceship) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[9]
}

func (x MissionInfo_Spaceship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionInfo_Spaceship.Descriptor instead.
func (MissionInfo_Spaceship) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{15, 0}
}

type MissionInfo_Status int32

const (
	MissionInfo_FUELING           MissionInfo_Status = 0
	MissionInfo_PREPARE_TO_LAUNCH MissionInfo_Status = 5
	MissionInfo_EXPLORING         MissionInfo_Status = 10
	MissionInfo_RETURNED          MissionInfo_Status = 15
	MissionInfo_ANALYZING         MissionInfo_Status = 16
	MissionInfo_COMPLETE          MissionInfo_Status = 20
	MissionInfo_ARCHIVED          MissionInfo_Status = 25
)

// Enum value maps for MissionInfo_Status.
var (
	MissionInfo_Status_name = map[int32]string{
		0:  "FUELING",
		5:  "PREPARE_TO_LAUNCH",
		10: "EXPLORING",
		15: "RETURNED",
		16: "ANALYZING",
		20: "COMPLETE",
		25: "ARCHIVED",
	}
	MissionInfo_Status_value = map[string]int32{
		"FUELING":           0,
		"PREPARE_TO_LAUNCH": 5,
		"EXPLORING":         10,
		"RETURNED":          15,
		"ANALYZING":         16,
		"COMPLETE":          20,
		"ARCHIVED":          25,
	}
)

func (x MissionInfo_Status) Enum() *MissionInfo_Status {
	p := new(MissionInfo_Status)
	*p = x
	return p
}

func (x MissionInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[10].Descriptor()
}

func (MissionInfo_Status) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[10]
}

func (x MissionInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionInfo_Status.Descriptor instead.
func (MissionInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{15, 1}
}

type MissionInfo_DurationType int32

const (
	MissionInfo_SHORT    MissionInfo_DurationType = 0
	MissionInfo_LONG     MissionInfo_DurationType = 1
	MissionInfo_EPIC     MissionInfo_DurationType = 2
	MissionInfo_TUTORIAL MissionInfo_DurationType = 3
)

// Enum value maps for MissionInfo_DurationType.
var (
	MissionInfo_DurationType_name = map[int32]string{
		0: "SHORT",
		1: "LONG",
		2: "EPIC",
		3: "TUTORIAL",
	}
	MissionInfo_DurationType_value = map[string]int32{
		"SHORT":    0,
		"LONG":     1,
		"EPIC":     2,
		"TUTORIAL": 3,
	}
)

func (x MissionInfo_DurationType) Enum() *MissionInfo_DurationType {
	p := new(MissionInfo_DurationType)
	*p = x
	return p
}

func (x MissionInfo_DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_proto_enumTypes[11].Descriptor()
}

func (MissionInfo_DurationType) Type() protoreflect.EnumType {
	return &file_ei_proto_enumTypes[11]
}

func (x MissionInfo_DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionInfo_DurationType.Descriptor instead.
func (MissionInfo_DurationType) EnumDescriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{15, 2}
}

type AuthenticatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AuthenticatedMessage) Reset() {
	*x = AuthenticatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedMessage) ProtoMessage() {}

func (x *AuthenticatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedMessage.ProtoReflect.Descriptor instead.
func (*AuthenticatedMessage) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticatedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AuthenticatedMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// https://www.auxbrain.com/ei/first_contact
type FirstContactRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo    *BasicRequestInfo `protobuf:"bytes,8,opt,name=rinfo,proto3" json:"rinfo,omitempty"`
	EiUserId string            `protobuf:"bytes,4,opt,name=ei_user_id,json=eiUserId,proto3" json:"ei_user_id,omitempty"`
	UserId   string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // old style user ID, now game_services_id;
	// using this seens to cause API response to return a
	// pre-artifact backup; don't set post-artifact.
	GameServicesId string   `protobuf:"bytes,7,opt,name=game_services_id,json=gameServicesId,proto3" json:"game_services_id,omitempty"` // old style user ID, e.g. G:1234567890
	DeviceId       string   `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                     // A UUID
	Username       string   `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	ClientVersion  uint32   `protobuf:"varint,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Platform       Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=Platform" json:"platform,omitempty"`
}

func (x *FirstContactRequestPayload) Reset() {
	*x = FirstContactRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContactRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContactRequestPayload) ProtoMessage() {}

func (x *FirstContactRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContactRequestPayload.ProtoReflect.Descriptor instead.
func (*FirstContactRequestPayload) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{1}
}

func (x *FirstContactRequestPayload) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *FirstContactRequestPayload) GetEiUserId() string {
	if x != nil {
		return x.EiUserId
	}
	return ""
}

func (x *FirstContactRequestPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FirstContactRequestPayload) GetGameServicesId() string {
	if x != nil {
		return x.GameServicesId
	}
	return ""
}

func (x *FirstContactRequestPayload) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FirstContactRequestPayload) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FirstContactRequestPayload) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *FirstContactRequestPayload) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_INVALID_PLATFORM
}

type BasicRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EiUserId      string `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId,proto3" json:"ei_user_id,omitempty"`
	ClientVersion uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Version       string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Build         string `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
	Platform      string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *BasicRequestInfo) Reset() {
	*x = BasicRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRequestInfo) ProtoMessage() {}

func (x *BasicRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRequestInfo.ProtoReflect.Descriptor instead.
func (*BasicRequestInfo) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{2}
}

func (x *BasicRequestInfo) GetEiUserId() string {
	if x != nil {
		return x.EiUserId
	}
	return ""
}

func (x *BasicRequestInfo) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

func (x *BasicRequestInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BasicRequestInfo) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *BasicRequestInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// Partially reverse engineered.
type FirstContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FirstContact_Payload `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FirstContact) Reset() {
	*x = FirstContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact) ProtoMessage() {}

func (x *FirstContact) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact.ProtoReflect.Descriptor instead.
func (*FirstContact) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3}
}

func (x *FirstContact) GetData() *FirstContact_Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

type Farm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EggType          EggType `protobuf:"varint,1,opt,name=egg_type,json=eggType,proto3,enum=EggType" json:"egg_type,omitempty"`
	PrestigeEarnings float64 `protobuf:"fixed64,2,opt,name=prestige_earnings,json=prestigeEarnings,proto3" json:"prestige_earnings,omitempty"`
	X3               float64 `protobuf:"fixed64,3,opt,name=_3,json=3,proto3" json:"_3,omitempty"` // on the same order of prestige_earnings but smaller,
	// not sure what it is; gift earnings maybe?
	LastSaved    float64 `protobuf:"fixed64,5,opt,name=last_saved,json=lastSaved,proto3" json:"last_saved,omitempty"` // epoch timestamp
	ChickenCount int64   `protobuf:"varint,6,opt,name=chicken_count,json=chickenCount,proto3" json:"chicken_count,omitempty"`
	EggsLaid     float64 `protobuf:"fixed64,9,opt,name=eggs_laid,json=eggsLaid,proto3" json:"eggs_laid,omitempty"`
	EggsPaidFor  float64 `protobuf:"fixed64,10,opt,name=eggs_paid_for,json=eggsPaidFor,proto3" json:"eggs_paid_for,omitempty"` // the only difference with eggs_laid seems to be
	// that eggs_laid is not rounded, and this is
	// rounded down.
	SilosOwned         int32         `protobuf:"varint,11,opt,name=silos_owned,json=silosOwned,proto3" json:"silos_owned,omitempty"`
	HabitatTypes       []int32       `protobuf:"varint,12,rep,packed,name=habitat_types,json=habitatTypes,proto3" json:"habitat_types,omitempty"`
	HabitatPopulations []int64       `protobuf:"varint,13,rep,packed,name=habitat_populations,json=habitatPopulations,proto3" json:"habitat_populations,omitempty"`
	VehicleTypes       []VehicleType `protobuf:"varint,17,rep,packed,name=vehicle_types,json=vehicleTypes,proto3,enum=VehicleType" json:"vehicle_types,omitempty"`
	TrainLengths       []int32       `protobuf:"varint,21,rep,packed,name=train_lengths,json=trainLengths,proto3" json:"train_lengths,omitempty"`
	Researches         []*Research   `protobuf:"bytes,18,rep,name=researches,proto3" json:"researches,omitempty"`
	ContractId         string        `protobuf:"bytes,20,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"` // empty for home farm
}

func (x *Farm) Reset() {
	*x = Farm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Farm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Farm) ProtoMessage() {}

func (x *Farm) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Farm.ProtoReflect.Descriptor instead.
func (*Farm) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{4}
}

func (x *Farm) GetEggType() EggType {
	if x != nil {
		return x.EggType
	}
	return EggType_INVALID_EGG
}

func (x *Farm) GetPrestigeEarnings() float64 {
	if x != nil {
		return x.PrestigeEarnings
	}
	return 0
}

func (x *Farm) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *Farm) GetLastSaved() float64 {
	if x != nil {
		return x.LastSaved
	}
	return 0
}

func (x *Farm) GetChickenCount() int64 {
	if x != nil {
		return x.ChickenCount
	}
	return 0
}

func (x *Farm) GetEggsLaid() float64 {
	if x != nil {
		return x.EggsLaid
	}
	return 0
}

func (x *Farm) GetEggsPaidFor() float64 {
	if x != nil {
		return x.EggsPaidFor
	}
	return 0
}

func (x *Farm) GetSilosOwned() int32 {
	if x != nil {
		return x.SilosOwned
	}
	return 0
}

func (x *Farm) GetHabitatTypes() []int32 {
	if x != nil {
		return x.HabitatTypes
	}
	return nil
}

func (x *Farm) GetHabitatPopulations() []int64 {
	if x != nil {
		return x.HabitatPopulations
	}
	return nil
}

func (x *Farm) GetVehicleTypes() []VehicleType {
	if x != nil {
		return x.VehicleTypes
	}
	return nil
}

func (x *Farm) GetTrainLengths() []int32 {
	if x != nil {
		return x.TrainLengths
	}
	return nil
}

func (x *Farm) GetResearches() []*Research {
	if x != nil {
		return x.Researches
	}
	return nil
}

func (x *Farm) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type Research struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Research) Reset() {
	*x = Research{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Research) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Research) ProtoMessage() {}

func (x *Research) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Research.ProtoReflect.Descriptor instead.
func (*Research) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{5}
}

func (x *Research) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Research) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type EpicResearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *EpicResearch) Reset() {
	*x = EpicResearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpicResearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpicResearch) ProtoMessage() {}

func (x *EpicResearch) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpicResearch.ProtoReflect.Descriptor instead.
func (*EpicResearch) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{6}
}

func (x *EpicResearch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EpicResearch) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props              *ContractProperties `protobuf:"bytes,1,opt,name=props,proto3" json:"props,omitempty"`
	Code               string              `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Started            float64             `protobuf:"fixed64,3,opt,name=started,proto3" json:"started,omitempty"`                                                 // epoch timestamp
	X4                 int32               `protobuf:"varint,4,opt,name=_4,json=4,proto3" json:"_4,omitempty"`                                                     // unknown; example: 1
	ProductionDeadline float64             `protobuf:"fixed64,5,opt,name=production_deadline,json=productionDeadline,proto3" json:"production_deadline,omitempty"` // epoch timestamp
	CompletedGoal      float64             `protobuf:"fixed64,6,opt,name=completed_goal,json=completedGoal,proto3" json:"completed_goal,omitempty"`
	X7                 int32               `protobuf:"varint,7,opt,name=_7,json=7,proto3" json:"_7,omitempty"`                                                     // unknown; example: 1
	CollectionDeadline float64             `protobuf:"fixed64,9,opt,name=collection_deadline,json=collectionDeadline,proto3" json:"collection_deadline,omitempty"` // epoch timestamp
	// 2 days after production deadline
	X10                int32   `protobuf:"varint,10,opt,name=_10,json=10,proto3" json:"_10,omitempty"` // unknown; example: 10
	PlayerContribution float64 `protobuf:"fixed64,11,opt,name=player_contribution,json=playerContribution,proto3" json:"player_contribution,omitempty"`
	PlayerId           string  `protobuf:"bytes,13,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	NumGoalsCompleted  int32   `protobuf:"varint,14,opt,name=num_goals_completed,json=numGoalsCompleted,proto3" json:"num_goals_completed,omitempty"`
	League             int32   `protobuf:"varint,15,opt,name=league,proto3" json:"league,omitempty"` // 0 for elite, 1 for standard
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{7}
}

func (x *Contract) GetProps() *ContractProperties {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Contract) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Contract) GetStarted() float64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *Contract) GetX4() int32 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *Contract) GetProductionDeadline() float64 {
	if x != nil {
		return x.ProductionDeadline
	}
	return 0
}

func (x *Contract) GetCompletedGoal() float64 {
	if x != nil {
		return x.CompletedGoal
	}
	return 0
}

func (x *Contract) GetX7() int32 {
	if x != nil {
		return x.X7
	}
	return 0
}

func (x *Contract) GetCollectionDeadline() float64 {
	if x != nil {
		return x.CollectionDeadline
	}
	return 0
}

func (x *Contract) GetX10() int32 {
	if x != nil {
		return x.X10
	}
	return 0
}

func (x *Contract) GetPlayerContribution() float64 {
	if x != nil {
		return x.PlayerContribution
	}
	return 0
}

func (x *Contract) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Contract) GetNumGoalsCompleted() int32 {
	if x != nil {
		return x.NumGoalsCompleted
	}
	return 0
}

func (x *Contract) GetLeague() int32 {
	if x != nil {
		return x.League
	}
	return 0
}

// ContractProperties contains player/session-agnostic properties of a contract.
type ContractProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EggType EggType   `protobuf:"varint,2,opt,name=egg_type,json=eggType,proto3,enum=EggType" json:"egg_type,omitempty"`
	Rewards []*Reward `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"` // seems always for elite
	// for standard rewards, check reward_tiers[1]
	CoopAllowed          bool                             `protobuf:"varint,4,opt,name=coop_allowed,json=coopAllowed,proto3" json:"coop_allowed,omitempty"`
	MaxCoopSize          int32                            `protobuf:"varint,5,opt,name=max_coop_size,json=maxCoopSize,proto3" json:"max_coop_size,omitempty"`
	ExpiryTimestamp      float64                          `protobuf:"fixed64,6,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
	DurationSeconds      float64                          `protobuf:"fixed64,7,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"` // total time to complete
	Name                 string                           `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                           `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Debug                bool                             `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`
	MaxBoosts            int32                            `protobuf:"varint,12,opt,name=max_boosts,json=maxBoosts,proto3" json:"max_boosts,omitempty"`
	MaxSoulEggs          float64                          `protobuf:"fixed64,13,opt,name=max_soul_eggs,json=maxSoulEggs,proto3" json:"max_soul_eggs,omitempty"`
	MinClientVersion     int32                            `protobuf:"varint,14,opt,name=min_client_version,json=minClientVersion,proto3" json:"min_client_version,omitempty"`
	TokenIntervalMinutes float64                          `protobuf:"fixed64,15,opt,name=token_interval_minutes,json=tokenIntervalMinutes,proto3" json:"token_interval_minutes,omitempty"`
	RewardTiers          []*ContractProperties_RewardTier `protobuf:"bytes,16,rep,name=reward_tiers,json=rewardTiers,proto3" json:"reward_tiers,omitempty"`
}

func (x *ContractProperties) Reset() {
	*x = ContractProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProperties) ProtoMessage() {}

func (x *ContractProperties) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProperties.ProtoReflect.Descriptor instead.
func (*ContractProperties) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{8}
}

func (x *ContractProperties) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContractProperties) GetEggType() EggType {
	if x != nil {
		return x.EggType
	}
	return EggType_INVALID_EGG
}

func (x *ContractProperties) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ContractProperties) GetCoopAllowed() bool {
	if x != nil {
		return x.CoopAllowed
	}
	return false
}

func (x *ContractProperties) GetMaxCoopSize() int32 {
	if x != nil {
		return x.MaxCoopSize
	}
	return 0
}

func (x *ContractProperties) GetExpiryTimestamp() float64 {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return 0
}

func (x *ContractProperties) GetDurationSeconds() float64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *ContractProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContractProperties) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContractProperties) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *ContractProperties) GetMaxBoosts() int32 {
	if x != nil {
		return x.MaxBoosts
	}
	return 0
}

func (x *ContractProperties) GetMaxSoulEggs() float64 {
	if x != nil {
		return x.MaxSoulEggs
	}
	return 0
}

func (x *ContractProperties) GetMinClientVersion() int32 {
	if x != nil {
		return x.MinClientVersion
	}
	return 0
}

func (x *ContractProperties) GetTokenIntervalMinutes() float64 {
	if x != nil {
		return x.TokenIntervalMinutes
	}
	return 0
}

func (x *ContractProperties) GetRewardTiers() []*ContractProperties_RewardTier {
	if x != nil {
		return x.RewardTiers
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1    int32      `protobuf:"varint,1,opt,name=_1,json=1,proto3" json:"_1,omitempty"`
	Goal  float64    `protobuf:"fixed64,2,opt,name=goal,proto3" json:"goal,omitempty"`
	Type  RewardType `protobuf:"varint,3,opt,name=type,proto3,enum=RewardType" json:"type,omitempty"`
	Name  string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Count float64    `protobuf:"fixed64,5,opt,name=count,proto3" json:"count,omitempty"`
	X6    float64    `protobuf:"fixed64,6,opt,name=_6,json=6,proto3" json:"_6,omitempty"` // unknown; maybe a difficulty indicator?
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{9}
}

func (x *Reward) GetX1() int32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *Reward) GetGoal() float64 {
	if x != nil {
		return x.Goal
	}
	return 0
}

func (x *Reward) GetType() RewardType {
	if x != nil {
		return x.Type
	}
	return RewardType_INVALID_REWARD
}

func (x *Reward) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reward) GetCount() float64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Reward) GetX6() float64 {
	if x != nil {
		return x.X6
	}
	return 0
}

type ArtifactsDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItems      []*ArtifactInventoryItem          `protobuf:"bytes,1,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	ItemSequence        uint64                            `protobuf:"varint,2,opt,name=item_sequence,json=itemSequence,proto3" json:"item_sequence,omitempty"`
	InventorySlots      []*InventorySlot                  `protobuf:"bytes,3,rep,name=inventory_slots,json=inventorySlots,proto3" json:"inventory_slots,omitempty"`
	ActiveArtifacts     []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,7,rep,name=active_artifacts,json=activeArtifacts,proto3" json:"active_artifacts,omitempty"`
	ActiveArtifactSets  []*ArtifactsDB_ActiveArtifactSet  `protobuf:"bytes,11,rep,name=active_artifact_sets,json=activeArtifactSets,proto3" json:"active_artifact_sets,omitempty"`
	DiscoveredArtifacts []*ArtifactSpec                   `protobuf:"bytes,8,rep,name=discovered_artifacts,json=discoveredArtifacts,proto3" json:"discovered_artifacts,omitempty"`
	CraftableArtifacts  []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,9,rep,name=craftable_artifacts,json=craftableArtifacts,proto3" json:"craftable_artifacts,omitempty"`
	CraftingCounts      []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,10,rep,name=crafting_counts,json=craftingCounts,proto3" json:"crafting_counts,omitempty"`
	MissionInfos        []*MissionInfo                    `protobuf:"bytes,4,rep,name=mission_infos,json=missionInfos,proto3" json:"mission_infos,omitempty"`
	MissionArchive      []*MissionInfo                    `protobuf:"bytes,5,rep,name=mission_archive,json=missionArchive,proto3" json:"mission_archive,omitempty"`
}

func (x *ArtifactsDB) Reset() {
	*x = ArtifactsDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB) ProtoMessage() {}

func (x *ArtifactsDB) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB.ProtoReflect.Descriptor instead.
func (*ArtifactsDB) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{10}
}

func (x *ArtifactsDB) GetInventoryItems() []*ArtifactInventoryItem {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *ArtifactsDB) GetItemSequence() uint64 {
	if x != nil {
		return x.ItemSequence
	}
	return 0
}

func (x *ArtifactsDB) GetInventorySlots() []*InventorySlot {
	if x != nil {
		return x.InventorySlots
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifacts() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.ActiveArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifactSets() []*ArtifactsDB_ActiveArtifactSet {
	if x != nil {
		return x.ActiveArtifactSets
	}
	return nil
}

func (x *ArtifactsDB) GetDiscoveredArtifacts() []*ArtifactSpec {
	if x != nil {
		return x.DiscoveredArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetCraftableArtifacts() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftableArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetCraftingCounts() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftingCounts
	}
	return nil
}

func (x *ArtifactsDB) GetMissionInfos() []*MissionInfo {
	if x != nil {
		return x.MissionInfos
	}
	return nil
}

func (x *ArtifactsDB) GetMissionArchive() []*MissionInfo {
	if x != nil {
		return x.MissionArchive
	}
	return nil
}

type ArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   ArtifactSpec_Name   `protobuf:"varint,1,opt,name=name,proto3,enum=ArtifactSpec_Name" json:"name,omitempty"`
	Level  ArtifactSpec_Level  `protobuf:"varint,2,opt,name=level,proto3,enum=ArtifactSpec_Level" json:"level,omitempty"`
	Rarity ArtifactSpec_Rarity `protobuf:"varint,3,opt,name=rarity,proto3,enum=ArtifactSpec_Rarity" json:"rarity,omitempty"`
	Egg    EggType             `protobuf:"varint,4,opt,name=egg,proto3,enum=EggType" json:"egg,omitempty"`
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{11}
}

func (x *ArtifactSpec) GetName() ArtifactSpec_Name {
	if x != nil {
		return x.Name
	}
	return ArtifactSpec_LUNAR_TOTEM
}

func (x *ArtifactSpec) GetLevel() ArtifactSpec_Level {
	if x != nil {
		return x.Level
	}
	return ArtifactSpec_INFERIOR
}

func (x *ArtifactSpec) GetRarity() ArtifactSpec_Rarity {
	if x != nil {
		return x.Rarity
	}
	return ArtifactSpec_COMMON
}

func (x *ArtifactSpec) GetEgg() EggType {
	if x != nil {
		return x.Egg
	}
	return EggType_INVALID_EGG
}

type ArtifactInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   uint64            `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Artifact *CompleteArtifact `protobuf:"bytes,2,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Quantity float64           `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ServerId string            `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *ArtifactInventoryItem) Reset() {
	*x = ArtifactInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInventoryItem) ProtoMessage() {}

func (x *ArtifactInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInventoryItem.ProtoReflect.Descriptor instead.
func (*ArtifactInventoryItem) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{12}
}

func (x *ArtifactInventoryItem) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ArtifactInventoryItem) GetArtifact() *CompleteArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ArtifactInventoryItem) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ArtifactInventoryItem) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type CompleteArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *ArtifactSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Stones []*ArtifactSpec `protobuf:"bytes,2,rep,name=stones,proto3" json:"stones,omitempty"`
}

func (x *CompleteArtifact) Reset() {
	*x = CompleteArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteArtifact) ProtoMessage() {}

func (x *CompleteArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteArtifact.ProtoReflect.Descriptor instead.
func (*CompleteArtifact) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{13}
}

func (x *CompleteArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CompleteArtifact) GetStones() []*ArtifactSpec {
	if x != nil {
		return x.Stones
	}
	return nil
}

type InventorySlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occupied bool   `protobuf:"varint,1,opt,name=occupied,proto3" json:"occupied,omitempty"`
	ItemId   uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *InventorySlot) Reset() {
	*x = InventorySlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventorySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventorySlot) ProtoMessage() {}

func (x *InventorySlot) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventorySlot.ProtoReflect.Descriptor instead.
func (*InventorySlot) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{14}
}

func (x *InventorySlot) GetOccupied() bool {
	if x != nil {
		return x.Occupied
	}
	return false
}

func (x *InventorySlot) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type MissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ship             MissionInfo_Spaceship    `protobuf:"varint,1,opt,name=ship,proto3,enum=MissionInfo_Spaceship" json:"ship,omitempty"`
	Status           MissionInfo_Status       `protobuf:"varint,2,opt,name=status,proto3,enum=MissionInfo_Status" json:"status,omitempty"`
	DurationType     MissionInfo_DurationType `protobuf:"varint,3,opt,name=duration_type,json=durationType,proto3,enum=MissionInfo_DurationType" json:"duration_type,omitempty"`
	Fuel             []*MissionInfo_Fuel      `protobuf:"bytes,4,rep,name=fuel,proto3" json:"fuel,omitempty"`
	DurationSeconds  float64                  `protobuf:"fixed64,5,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	SecondsRemaining float64                  `protobuf:"fixed64,6,opt,name=seconds_remaining,json=secondsRemaining,proto3" json:"seconds_remaining,omitempty"`
	Identifier       string                   `protobuf:"bytes,7,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StartTimeDerived float64                  `protobuf:"fixed64,8,opt,name=start_time_derived,json=startTimeDerived,proto3" json:"start_time_derived,omitempty"`
	Capacity         uint32                   `protobuf:"varint,9,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MissionLog       string                   `protobuf:"bytes,10,opt,name=mission_log,json=missionLog,proto3" json:"mission_log,omitempty"`
}

func (x *MissionInfo) Reset() {
	*x = MissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo) ProtoMessage() {}

func (x *MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo.ProtoReflect.Descriptor instead.
func (*MissionInfo) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{15}
}

func (x *MissionInfo) GetShip() MissionInfo_Spaceship {
	if x != nil {
		return x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *MissionInfo) GetStatus() MissionInfo_Status {
	if x != nil {
		return x.Status
	}
	return MissionInfo_FUELING
}

func (x *MissionInfo) GetDurationType() MissionInfo_DurationType {
	if x != nil {
		return x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *MissionInfo) GetFuel() []*MissionInfo_Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

func (x *MissionInfo) GetDurationSeconds() float64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *MissionInfo) GetSecondsRemaining() float64 {
	if x != nil {
		return x.SecondsRemaining
	}
	return 0
}

func (x *MissionInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *MissionInfo) GetStartTimeDerived() float64 {
	if x != nil {
		return x.StartTimeDerived
	}
	return 0
}

func (x *MissionInfo) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *MissionInfo) GetMissionLog() string {
	if x != nil {
		return x.MissionLog
	}
	return ""
}

// https://www.auxbrain.com/ei/coop_status
type CoopStatusRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	PlayerId   string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *CoopStatusRequestPayload) Reset() {
	*x = CoopStatusRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopStatusRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopStatusRequestPayload) ProtoMessage() {}

func (x *CoopStatusRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopStatusRequestPayload.ProtoReflect.Descriptor instead.
func (*CoopStatusRequestPayload) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{16}
}

func (x *CoopStatusRequestPayload) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CoopStatusRequestPayload) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CoopStatusRequestPayload) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type CoopStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId                     string               `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EggsLaid                       float64              `protobuf:"fixed64,2,opt,name=eggs_laid,json=eggsLaid,proto3" json:"eggs_laid,omitempty"`
	Code                           string               `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Members                        []*CoopStatus_Member `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	SecondsUntilProductionDeadline float64              `protobuf:"fixed64,5,opt,name=seconds_until_production_deadline,json=secondsUntilProductionDeadline,proto3" json:"seconds_until_production_deadline,omitempty"`
	X6                             int32                `protobuf:"varint,6,opt,name=_6,json=6,proto3" json:"_6,omitempty"` // unknown, maybe bool; example: 0
	SecondsUntilCollectionDeadline float64              `protobuf:"fixed64,7,opt,name=seconds_until_collection_deadline,json=secondsUntilCollectionDeadline,proto3" json:"seconds_until_collection_deadline,omitempty"`
	X8                             int32                `protobuf:"varint,8,opt,name=_8,json=8,proto3" json:"_8,omitempty"` // unknown, maybe bool; example: 0
	CreatorId                      string               `protobuf:"bytes,9,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Public                         bool                 `protobuf:"varint,10,opt,name=public,proto3" json:"public,omitempty"`
	// token_gifts is only available if player_id is specified in
	// CoopStatusRequestPayload, and only gifts for the requested player are
	// returned.
	//
	// WARNING: gifts are only returned once, meaning that if you intercept a
	// response carrying gifts without feeding it to the game, the gifts would
	// simply vanish from game state unless you MITM /coop_status and edit the
	// response (which is also an obvious cheating vector to bypass the chore of
	// token griding).
	TokenGifts []*CoopStatus_TokenGift `protobuf:"bytes,11,rep,name=token_gifts,json=tokenGifts,proto3" json:"token_gifts,omitempty"`
	// egg_contractor_league is NOT part of Egg, Inc.'s protobuf. It is a field
	// added to counter the braindead design of not including the league in
	// ContractCoopStatusResponse and avoid loads of interwined code.
	//
	// Since the default value of 0 cannot be used as an actual value, the value
	// stored here is Contract.league + 1, i.e. 1 for elite, 2 for standard, 0 for
	// unknown.
	EggContractorLeague int32 `protobuf:"varint,1000,opt,name=egg_contractor_league,json=eggContractorLeague,proto3" json:"egg_contractor_league,omitempty"`
}

func (x *CoopStatus) Reset() {
	*x = CoopStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopStatus) ProtoMessage() {}

func (x *CoopStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopStatus.ProtoReflect.Descriptor instead.
func (*CoopStatus) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{17}
}

func (x *CoopStatus) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CoopStatus) GetEggsLaid() float64 {
	if x != nil {
		return x.EggsLaid
	}
	return 0
}

func (x *CoopStatus) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CoopStatus) GetMembers() []*CoopStatus_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CoopStatus) GetSecondsUntilProductionDeadline() float64 {
	if x != nil {
		return x.SecondsUntilProductionDeadline
	}
	return 0
}

func (x *CoopStatus) GetX6() int32 {
	if x != nil {
		return x.X6
	}
	return 0
}

func (x *CoopStatus) GetSecondsUntilCollectionDeadline() float64 {
	if x != nil {
		return x.SecondsUntilCollectionDeadline
	}
	return 0
}

func (x *CoopStatus) GetX8() int32 {
	if x != nil {
		return x.X8
	}
	return 0
}

func (x *CoopStatus) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *CoopStatus) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *CoopStatus) GetTokenGifts() []*CoopStatus_TokenGift {
	if x != nil {
		return x.TokenGifts
	}
	return nil
}

func (x *CoopStatus) GetEggContractorLeague() int32 {
	if x != nil {
		return x.EggContractorLeague
	}
	return 0
}

// https://www.auxbrain.com/ei/get_periodicals
type GetPeriodicalsRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PiggyFull            bool              `protobuf:"varint,2,opt,name=piggy_full,json=piggyFull,proto3" json:"piggy_full,omitempty"`
	PiggyFoundFull       bool              `protobuf:"varint,3,opt,name=piggy_found_full,json=piggyFoundFull,proto3" json:"piggy_found_full,omitempty"`
	SecondsFullRealtime  float64           `protobuf:"fixed64,4,opt,name=seconds_full_realtime,json=secondsFullRealtime,proto3" json:"seconds_full_realtime,omitempty"`
	SecondsFullGametime  float64           `protobuf:"fixed64,5,opt,name=seconds_full_gametime,json=secondsFullGametime,proto3" json:"seconds_full_gametime,omitempty"`
	LostIncrements       uint32            `protobuf:"varint,7,opt,name=lost_increments,json=lostIncrements,proto3" json:"lost_increments,omitempty"`
	SoulEggs             float64           `protobuf:"fixed64,8,opt,name=soul_eggs,json=soulEggs,proto3" json:"soul_eggs,omitempty"`
	CurrentClientVersion uint32            `protobuf:"varint,10,opt,name=current_client_version,json=currentClientVersion,proto3" json:"current_client_version,omitempty"`
	Debug                bool              `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`
	Rinfo                *BasicRequestInfo `protobuf:"bytes,12,opt,name=rinfo,proto3" json:"rinfo,omitempty"`
}

func (x *GetPeriodicalsRequestPayload) Reset() {
	*x = GetPeriodicalsRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeriodicalsRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodicalsRequestPayload) ProtoMessage() {}

func (x *GetPeriodicalsRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodicalsRequestPayload.ProtoReflect.Descriptor instead.
func (*GetPeriodicalsRequestPayload) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{18}
}

func (x *GetPeriodicalsRequestPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPeriodicalsRequestPayload) GetPiggyFull() bool {
	if x != nil {
		return x.PiggyFull
	}
	return false
}

func (x *GetPeriodicalsRequestPayload) GetPiggyFoundFull() bool {
	if x != nil {
		return x.PiggyFoundFull
	}
	return false
}

func (x *GetPeriodicalsRequestPayload) GetSecondsFullRealtime() float64 {
	if x != nil {
		return x.SecondsFullRealtime
	}
	return 0
}

func (x *GetPeriodicalsRequestPayload) GetSecondsFullGametime() float64 {
	if x != nil {
		return x.SecondsFullGametime
	}
	return 0
}

func (x *GetPeriodicalsRequestPayload) GetLostIncrements() uint32 {
	if x != nil {
		return x.LostIncrements
	}
	return 0
}

func (x *GetPeriodicalsRequestPayload) GetSoulEggs() float64 {
	if x != nil {
		return x.SoulEggs
	}
	return 0
}

func (x *GetPeriodicalsRequestPayload) GetCurrentClientVersion() uint32 {
	if x != nil {
		return x.CurrentClientVersion
	}
	return 0
}

func (x *GetPeriodicalsRequestPayload) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *GetPeriodicalsRequestPayload) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

type Periodicals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales     *Periodicals_Sales     `protobuf:"bytes,1,opt,name=sales,proto3" json:"sales,omitempty"`
	Events    *Periodicals_Events    `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
	Contracts *Periodicals_Contracts `protobuf:"bytes,3,opt,name=contracts,proto3" json:"contracts,omitempty"`
}

func (x *Periodicals) Reset() {
	*x = Periodicals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodicals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodicals) ProtoMessage() {}

func (x *Periodicals) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodicals.ProtoReflect.Descriptor instead.
func (*Periodicals) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{19}
}

func (x *Periodicals) GetSales() *Periodicals_Sales {
	if x != nil {
		return x.Sales
	}
	return nil
}

func (x *Periodicals) GetEvents() *Periodicals_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Periodicals) GetContracts() *Periodicals_Contracts {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type Sale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleType         string  `protobuf:"bytes,1,opt,name=sale_type,json=saleType,proto3" json:"sale_type,omitempty"` // Example: "piggy_break"
	SecondsRemaining float64 `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining,proto3" json:"seconds_remaining,omitempty"`
	SaleAmount       string  `protobuf:"bytes,3,opt,name=sale_amount,json=saleAmount,proto3" json:"sale_amount,omitempty"` // Example: "40%"; no equivalent numeric field
	Id               string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                                   // Example: "gametime-piggy-sale"
}

func (x *Sale) Reset() {
	*x = Sale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sale) ProtoMessage() {}

func (x *Sale) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sale.ProtoReflect.Descriptor instead.
func (*Sale) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{20}
}

func (x *Sale) GetSaleType() string {
	if x != nil {
		return x.SaleType
	}
	return ""
}

func (x *Sale) GetSecondsRemaining() float64 {
	if x != nil {
		return x.SecondsRemaining
	}
	return 0
}

func (x *Sale) GetSaleAmount() string {
	if x != nil {
		return x.SaleAmount
	}
	return ""
}

func (x *Sale) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SecondsRemaining float64 `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining,proto3" json:"seconds_remaining,omitempty"`
	EventType        string  `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Multiplier       float64 `protobuf:"fixed64,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"` // For discount events, this is the final price
	// multiplier, e.g. 0.3 for 70% off research.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{21}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetSecondsRemaining() float64 {
	if x != nil {
		return x.SecondsRemaining
	}
	return 0
}

func (x *Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Event) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// https://www.auxbrain.com/ei_afx/config
type ArtifactsConfigurationRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo `protobuf:"bytes,2,opt,name=rinfo,proto3" json:"rinfo,omitempty"`
	ClientVersion uint32            `protobuf:"varint,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *ArtifactsConfigurationRequestPayload) Reset() {
	*x = ArtifactsConfigurationRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationRequestPayload) ProtoMessage() {}

func (x *ArtifactsConfigurationRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationRequestPayload.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationRequestPayload) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{22}
}

func (x *ArtifactsConfigurationRequestPayload) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ArtifactsConfigurationRequestPayload) GetClientVersion() uint32 {
	if x != nil {
		return x.ClientVersion
	}
	return 0
}

type ArtifactsConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionParameters  []*ArtifactsConfigurationResponse_MissionParameters  `protobuf:"bytes,1,rep,name=mission_parameters,json=missionParameters,proto3" json:"mission_parameters,omitempty"`
	ArtifactParameters []*ArtifactsConfigurationResponse_ArtifactParameters `protobuf:"bytes,2,rep,name=artifact_parameters,json=artifactParameters,proto3" json:"artifact_parameters,omitempty"`
}

func (x *ArtifactsConfigurationResponse) Reset() {
	*x = ArtifactsConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{23}
}

func (x *ArtifactsConfigurationResponse) GetMissionParameters() []*ArtifactsConfigurationResponse_MissionParameters {
	if x != nil {
		return x.MissionParameters
	}
	return nil
}

func (x *ArtifactsConfigurationResponse) GetArtifactParameters() []*ArtifactsConfigurationResponse_ArtifactParameters {
	if x != nil {
		return x.ArtifactParameters
	}
	return nil
}

// https://www.auxbrain.com/ei/get_config
type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo            *BasicRequestInfo `protobuf:"bytes,1,opt,name=rinfo,proto3" json:"rinfo,omitempty"`
	SoulEggs         float64           `protobuf:"fixed64,2,opt,name=soul_eggs,json=soulEggs,proto3" json:"soul_eggs,omitempty"`
	ArtifactsEnabled bool              `protobuf:"varint,3,opt,name=artifacts_enabled,json=artifactsEnabled,proto3" json:"artifacts_enabled,omitempty"`
	FuelTankUnlocked bool              `protobuf:"varint,4,opt,name=fuel_tank_unlocked,json=fuelTankUnlocked,proto3" json:"fuel_tank_unlocked,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ConfigRequest) GetSoulEggs() float64 {
	if x != nil {
		return x.SoulEggs
	}
	return 0
}

func (x *ConfigRequest) GetArtifactsEnabled() bool {
	if x != nil {
		return x.ArtifactsEnabled
	}
	return false
}

func (x *ConfigRequest) GetFuelTankUnlocked() bool {
	if x != nil {
		return x.FuelTankUnlocked
	}
	return false
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveConfig *LiveConfig `protobuf:"bytes,1,opt,name=live_config,json=liveConfig,proto3" json:"live_config,omitempty"`
	MailBag    *MailDB     `protobuf:"bytes,2,opt,name=mail_bag,json=mailBag,proto3" json:"mail_bag,omitempty"`
	DlcCatalog *DLCCatalog `protobuf:"bytes,3,opt,name=dlc_catalog,json=dlcCatalog,proto3" json:"dlc_catalog,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigResponse) GetLiveConfig() *LiveConfig {
	if x != nil {
		return x.LiveConfig
	}
	return nil
}

func (x *ConfigResponse) GetMailBag() *MailDB {
	if x != nil {
		return x.MailBag
	}
	return nil
}

func (x *ConfigResponse) GetDlcCatalog() *DLCCatalog {
	if x != nil {
		return x.DlcCatalog
	}
	return nil
}

type LiveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId     string                   `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BoostsConfig *LiveConfig_BoostsConfig `protobuf:"bytes,2,opt,name=boosts_config,json=boostsConfig,proto3" json:"boosts_config,omitempty"`
	GiftConfig   *LiveConfig_GiftConfig   `protobuf:"bytes,3,opt,name=gift_config,json=giftConfig,proto3" json:"gift_config,omitempty"`
	MiscConfig   *LiveConfig_MiscConfig   `protobuf:"bytes,4,opt,name=misc_config,json=miscConfig,proto3" json:"misc_config,omitempty"`
}

func (x *LiveConfig) Reset() {
	*x = LiveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig) ProtoMessage() {}

func (x *LiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26}
}

func (x *LiveConfig) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *LiveConfig) GetBoostsConfig() *LiveConfig_BoostsConfig {
	if x != nil {
		return x.BoostsConfig
	}
	return nil
}

func (x *LiveConfig) GetGiftConfig() *LiveConfig_GiftConfig {
	if x != nil {
		return x.GiftConfig
	}
	return nil
}

func (x *LiveConfig) GetMiscConfig() *LiveConfig_MiscConfig {
	if x != nil {
		return x.MiscConfig
	}
	return nil
}

type InGameMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title            string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Date             string   `protobuf:"bytes,8,opt,name=date,proto3" json:"date,omitempty"`
	Message          string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Action           string   `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Url              string   `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Platform         uint32   `protobuf:"varint,7,opt,name=platform,proto3" json:"platform,omitempty"`
	Builds           []string `protobuf:"bytes,9,rep,name=builds,proto3" json:"builds,omitempty"`
	MinClientVersion uint32   `protobuf:"varint,10,opt,name=min_client_version,json=minClientVersion,proto3" json:"min_client_version,omitempty"`
	GoldTip          float64  `protobuf:"fixed64,6,opt,name=gold_tip,json=goldTip,proto3" json:"gold_tip,omitempty"`
}

func (x *InGameMail) Reset() {
	*x = InGameMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InGameMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InGameMail) ProtoMessage() {}

func (x *InGameMail) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InGameMail.ProtoReflect.Descriptor instead.
func (*InGameMail) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{27}
}

func (x *InGameMail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InGameMail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InGameMail) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *InGameMail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InGameMail) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *InGameMail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *InGameMail) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *InGameMail) GetBuilds() []string {
	if x != nil {
		return x.Builds
	}
	return nil
}

func (x *InGameMail) GetMinClientVersion() uint32 {
	if x != nil {
		return x.MinClientVersion
	}
	return 0
}

func (x *InGameMail) GetGoldTip() float64 {
	if x != nil {
		return x.GoldTip
	}
	return 0
}

type MailDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail []*InGameMail `protobuf:"bytes,1,rep,name=mail,proto3" json:"mail,omitempty"`
}

func (x *MailDB) Reset() {
	*x = MailDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailDB) ProtoMessage() {}

func (x *MailDB) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailDB.ProtoReflect.Descriptor instead.
func (*MailDB) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{28}
}

func (x *MailDB) GetMail() []*InGameMail {
	if x != nil {
		return x.Mail
	}
	return nil
}

type DLCItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Ext       string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	Url       string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Checksum  string `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *DLCItem) Reset() {
	*x = DLCItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCItem) ProtoMessage() {}

func (x *DLCItem) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLCItem.ProtoReflect.Descriptor instead.
func (*DLCItem) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{29}
}

func (x *DLCItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DLCItem) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *DLCItem) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *DLCItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DLCItem) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type DLCCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DLCItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DLCCatalog) Reset() {
	*x = DLCCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLCCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCCatalog) ProtoMessage() {}

func (x *DLCCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLCCatalog.ProtoReflect.Descriptor instead.
func (*DLCCatalog) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{30}
}

func (x *DLCCatalog) GetItems() []*DLCItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FirstContact_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string                          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EiUserId         string                          `protobuf:"bytes,18,opt,name=ei_user_id,json=eiUserId,proto3" json:"ei_user_id,omitempty"`
	GameServicesId   string                          `protobuf:"bytes,16,opt,name=game_services_id,json=gameServicesId,proto3" json:"game_services_id,omitempty"`
	DeviceId         string                          `protobuf:"bytes,17,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	UserName         string                          `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	ApproxTimestamp  float64                         `protobuf:"fixed64,3,opt,name=approx_timestamp,json=approxTimestamp,proto3" json:"approx_timestamp,omitempty"`
	Version          uint32                          `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	ForceOfferBackup bool                            `protobuf:"varint,20,opt,name=force_offer_backup,json=forceOfferBackup,proto3" json:"force_offer_backup,omitempty"`
	ForceBackup      bool                            `protobuf:"varint,22,opt,name=force_backup,json=forceBackup,proto3" json:"force_backup,omitempty"`
	Settings         *FirstContact_Payload_Settings  `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	Stats            *FirstContact_Payload_Stats     `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Progress         *FirstContact_Payload_Progress  `protobuf:"bytes,7,opt,name=progress,proto3" json:"progress,omitempty"`
	Farms            []*Farm                         `protobuf:"bytes,12,rep,name=farms,proto3" json:"farms,omitempty"`
	Contracts        *FirstContact_Payload_Contracts `protobuf:"bytes,13,opt,name=contracts,proto3" json:"contracts,omitempty"`
	Artifacts        *FirstContact_Payload_Artifacts `protobuf:"bytes,14,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
	ArtifactsDb      *ArtifactsDB                    `protobuf:"bytes,15,opt,name=artifacts_db,json=artifactsDb,proto3" json:"artifacts_db,omitempty"`
}

func (x *FirstContact_Payload) Reset() {
	*x = FirstContact_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload) ProtoMessage() {}

func (x *FirstContact_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FirstContact_Payload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FirstContact_Payload) GetEiUserId() string {
	if x != nil {
		return x.EiUserId
	}
	return ""
}

func (x *FirstContact_Payload) GetGameServicesId() string {
	if x != nil {
		return x.GameServicesId
	}
	return ""
}

func (x *FirstContact_Payload) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FirstContact_Payload) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FirstContact_Payload) GetApproxTimestamp() float64 {
	if x != nil {
		return x.ApproxTimestamp
	}
	return 0
}

func (x *FirstContact_Payload) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FirstContact_Payload) GetForceOfferBackup() bool {
	if x != nil {
		return x.ForceOfferBackup
	}
	return false
}

func (x *FirstContact_Payload) GetForceBackup() bool {
	if x != nil {
		return x.ForceBackup
	}
	return false
}

func (x *FirstContact_Payload) GetSettings() *FirstContact_Payload_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *FirstContact_Payload) GetStats() *FirstContact_Payload_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FirstContact_Payload) GetProgress() *FirstContact_Payload_Progress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *FirstContact_Payload) GetFarms() []*Farm {
	if x != nil {
		return x.Farms
	}
	return nil
}

func (x *FirstContact_Payload) GetContracts() *FirstContact_Payload_Contracts {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *FirstContact_Payload) GetArtifacts() *FirstContact_Payload_Artifacts {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *FirstContact_Payload) GetArtifactsDb() *ArtifactsDB {
	if x != nil {
		return x.ArtifactsDb
	}
	return nil
}

type FirstContact_Payload_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sfx                  int32   `protobuf:"varint,1,opt,name=sfx,proto3" json:"sfx,omitempty"`
	Music                int32   `protobuf:"varint,2,opt,name=music,proto3" json:"music,omitempty"`
	Notifications        int32   `protobuf:"varint,6,opt,name=notifications,proto3" json:"notifications,omitempty"`
	LowPerformance       int32   `protobuf:"varint,10,opt,name=low_performance,json=lowPerformance,proto3" json:"low_performance,omitempty"`
	Advertising          int32   `protobuf:"varint,14,opt,name=advertising,proto3" json:"advertising,omitempty"`
	DeveloperAnalytics_1 int32   `protobuf:"varint,22,opt,name=developer_analytics_1,json=developerAnalytics1,proto3" json:"developer_analytics_1,omitempty"` // Both toggle together
	DeveloperAnalytics_2 int32   `protobuf:"varint,23,opt,name=developer_analytics_2,json=developerAnalytics2,proto3" json:"developer_analytics_2,omitempty"`
	BackupTimestamp      float64 `protobuf:"fixed64,24,opt,name=backup_timestamp,json=backupTimestamp,proto3" json:"backup_timestamp,omitempty"` // epoch timestamp
}

func (x *FirstContact_Payload_Settings) Reset() {
	*x = FirstContact_Payload_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Settings) ProtoMessage() {}

func (x *FirstContact_Payload_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Settings.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Settings) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *FirstContact_Payload_Settings) GetSfx() int32 {
	if x != nil {
		return x.Sfx
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetMusic() int32 {
	if x != nil {
		return x.Music
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetNotifications() int32 {
	if x != nil {
		return x.Notifications
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetLowPerformance() int32 {
	if x != nil {
		return x.LowPerformance
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetAdvertising() int32 {
	if x != nil {
		return x.Advertising
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetDeveloperAnalytics_1() int32 {
	if x != nil {
		return x.DeveloperAnalytics_1
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetDeveloperAnalytics_2() int32 {
	if x != nil {
		return x.DeveloperAnalytics_2
	}
	return 0
}

func (x *FirstContact_Payload_Settings) GetBackupTimestamp() float64 {
	if x != nil {
		return x.BackupTimestamp
	}
	return 0
}

type FirstContact_Payload_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DroneTakedowns      int32     `protobuf:"varint,6,opt,name=drone_takedowns,json=droneTakedowns,proto3" json:"drone_takedowns,omitempty"`
	FarmEggsLaid        []float64 `protobuf:"fixed64,8,rep,packed,name=farm_eggs_laid,json=farmEggsLaid,proto3" json:"farm_eggs_laid,omitempty"` // One entry for each egg type.
	Prestiges           int32     `protobuf:"varint,9,opt,name=prestiges,proto3" json:"prestiges,omitempty"`
	EliteDroneTakedowns int32     `protobuf:"varint,10,opt,name=elite_drone_takedowns,json=eliteDroneTakedowns,proto3" json:"elite_drone_takedowns,omitempty"`
	PiggyLevel          int32     `protobuf:"varint,11,opt,name=piggy_level,json=piggyLevel,proto3" json:"piggy_level,omitempty"`
	BoostsUsed          int32     `protobuf:"varint,13,opt,name=boosts_used,json=boostsUsed,proto3" json:"boosts_used,omitempty"`
}

func (x *FirstContact_Payload_Stats) Reset() {
	*x = FirstContact_Payload_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Stats) ProtoMessage() {}

func (x *FirstContact_Payload_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Stats.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Stats) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *FirstContact_Payload_Stats) GetDroneTakedowns() int32 {
	if x != nil {
		return x.DroneTakedowns
	}
	return 0
}

func (x *FirstContact_Payload_Stats) GetFarmEggsLaid() []float64 {
	if x != nil {
		return x.FarmEggsLaid
	}
	return nil
}

func (x *FirstContact_Payload_Stats) GetPrestiges() int32 {
	if x != nil {
		return x.Prestiges
	}
	return 0
}

func (x *FirstContact_Payload_Stats) GetEliteDroneTakedowns() int32 {
	if x != nil {
		return x.EliteDroneTakedowns
	}
	return 0
}

func (x *FirstContact_Payload_Stats) GetPiggyLevel() int32 {
	if x != nil {
		return x.PiggyLevel
	}
	return 0
}

func (x *FirstContact_Payload_Stats) GetBoostsUsed() int32 {
	if x != nil {
		return x.BoostsUsed
	}
	return 0
}

type FirstContact_Payload_Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifetimeGoldenEggs        uint64          `protobuf:"varint,2,opt,name=lifetime_golden_eggs,json=lifetimeGoldenEggs,proto3" json:"lifetime_golden_eggs,omitempty"`
	LifetimeGoldenEggsSpent   uint64          `protobuf:"varint,3,opt,name=lifetime_golden_eggs_spent,json=lifetimeGoldenEggsSpent,proto3" json:"lifetime_golden_eggs_spent,omitempty"`
	PrestigeEarnings          float64         `protobuf:"fixed64,5,opt,name=prestige_earnings,json=prestigeEarnings,proto3" json:"prestige_earnings,omitempty"`
	LifetimeEarnings          float64         `protobuf:"fixed64,6,opt,name=lifetime_earnings,json=lifetimeEarnings,proto3" json:"lifetime_earnings,omitempty"`
	PiggyBank                 uint64          `protobuf:"varint,7,opt,name=piggy_bank,json=piggyBank,proto3" json:"piggy_bank,omitempty"`
	PermitLevel               int32           `protobuf:"varint,8,opt,name=permit_level,json=permitLevel,proto3" json:"permit_level,omitempty"` // 0 - standard permit; 1 - pro permit
	EpicResearches            []*EpicResearch `protobuf:"bytes,9,rep,name=epic_researches,json=epicResearches,proto3" json:"epic_researches,omitempty"`
	MaxFarmPopulationsReached []int64         `protobuf:"varint,18,rep,packed,name=max_farm_populations_reached,json=maxFarmPopulationsReached,proto3" json:"max_farm_populations_reached,omitempty"` // One entry for
	// each egg type.
	FarmTrophyLevel []TrophyType `protobuf:"varint,19,rep,packed,name=farm_trophy_level,json=farmTrophyLevel,proto3,enum=TrophyType" json:"farm_trophy_level,omitempty"` // One entry for
	// each egg type.
	ProphecyEggs           int32                                  `protobuf:"varint,23,opt,name=prophecy_eggs,json=prophecyEggs,proto3" json:"prophecy_eggs,omitempty"`
	NumDailyGiftsCollected int32                                  `protobuf:"varint,28,opt,name=num_daily_gifts_collected,json=numDailyGiftsCollected,proto3" json:"num_daily_gifts_collected,omitempty"`
	Boosts                 []*FirstContact_Payload_Progress_Boost `protobuf:"bytes,30,rep,name=boosts,proto3" json:"boosts,omitempty"`
	SoulEggs               float64                                `protobuf:"fixed64,34,opt,name=soul_eggs,json=soulEggs,proto3" json:"soul_eggs,omitempty"`
}

func (x *FirstContact_Payload_Progress) Reset() {
	*x = FirstContact_Payload_Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Progress) ProtoMessage() {}

func (x *FirstContact_Payload_Progress) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Progress.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Progress) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 2}
}

func (x *FirstContact_Payload_Progress) GetLifetimeGoldenEggs() uint64 {
	if x != nil {
		return x.LifetimeGoldenEggs
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetLifetimeGoldenEggsSpent() uint64 {
	if x != nil {
		return x.LifetimeGoldenEggsSpent
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetPrestigeEarnings() float64 {
	if x != nil {
		return x.PrestigeEarnings
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetLifetimeEarnings() float64 {
	if x != nil {
		return x.LifetimeEarnings
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetPiggyBank() uint64 {
	if x != nil {
		return x.PiggyBank
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetPermitLevel() int32 {
	if x != nil {
		return x.PermitLevel
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetEpicResearches() []*EpicResearch {
	if x != nil {
		return x.EpicResearches
	}
	return nil
}

func (x *FirstContact_Payload_Progress) GetMaxFarmPopulationsReached() []int64 {
	if x != nil {
		return x.MaxFarmPopulationsReached
	}
	return nil
}

func (x *FirstContact_Payload_Progress) GetFarmTrophyLevel() []TrophyType {
	if x != nil {
		return x.FarmTrophyLevel
	}
	return nil
}

func (x *FirstContact_Payload_Progress) GetProphecyEggs() int32 {
	if x != nil {
		return x.ProphecyEggs
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetNumDailyGiftsCollected() int32 {
	if x != nil {
		return x.NumDailyGiftsCollected
	}
	return 0
}

func (x *FirstContact_Payload_Progress) GetBoosts() []*FirstContact_Payload_Progress_Boost {
	if x != nil {
		return x.Boosts
	}
	return nil
}

func (x *FirstContact_Payload_Progress) GetSoulEggs() float64 {
	if x != nil {
		return x.SoulEggs
	}
	return 0
}

type FirstContact_Payload_Contracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveContracts    []*Contract   `protobuf:"bytes,1,rep,name=active_contracts,json=activeContracts,proto3" json:"active_contracts,omitempty"`
	PastContracts      []*Contract   `protobuf:"bytes,2,rep,name=past_contracts,json=pastContracts,proto3" json:"past_contracts,omitempty"`
	ContractIds        []string      `protobuf:"bytes,3,rep,name=contract_ids,json=contractIds,proto3" json:"contract_ids,omitempty"`
	ActiveCoopStatuses []*CoopStatus `protobuf:"bytes,4,rep,name=active_coop_statuses,json=activeCoopStatuses,proto3" json:"active_coop_statuses,omitempty"`
}

func (x *FirstContact_Payload_Contracts) Reset() {
	*x = FirstContact_Payload_Contracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Contracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Contracts) ProtoMessage() {}

func (x *FirstContact_Payload_Contracts) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Contracts.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Contracts) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 3}
}

func (x *FirstContact_Payload_Contracts) GetActiveContracts() []*Contract {
	if x != nil {
		return x.ActiveContracts
	}
	return nil
}

func (x *FirstContact_Payload_Contracts) GetPastContracts() []*Contract {
	if x != nil {
		return x.PastContracts
	}
	return nil
}

func (x *FirstContact_Payload_Contracts) GetContractIds() []string {
	if x != nil {
		return x.ContractIds
	}
	return nil
}

func (x *FirstContact_Payload_Contracts) GetActiveCoopStatuses() []*CoopStatus {
	if x != nil {
		return x.ActiveCoopStatuses
	}
	return nil
}

// WARNING: Defaults not applied due to proto3 limitations!
type FirstContact_Payload_Artifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infusing                bool                   `protobuf:"varint,1,opt,name=infusing,proto3" json:"infusing,omitempty"`
	ItemBeingInfused        *ArtifactInventoryItem `protobuf:"bytes,2,opt,name=item_being_infused,json=itemBeingInfused,proto3" json:"item_being_infused,omitempty"`
	SpecBeingInfused        *ArtifactSpec          `protobuf:"bytes,13,opt,name=spec_being_infused,json=specBeingInfused,proto3" json:"spec_being_infused,omitempty"`
	EggTypeInfusing         EggType                `protobuf:"varint,3,opt,name=egg_type_infusing,json=eggTypeInfusing,proto3,enum=EggType" json:"egg_type_infusing,omitempty"`
	InfusingEggsRequired    float64                `protobuf:"fixed64,4,opt,name=infusing_eggs_required,json=infusingEggsRequired,proto3" json:"infusing_eggs_required,omitempty"`
	EggsInfused             float64                `protobuf:"fixed64,5,opt,name=eggs_infused,json=eggsInfused,proto3" json:"eggs_infused,omitempty"`
	FlowPercentageArtifacts float64                `protobuf:"fixed64,6,opt,name=flow_percentage_artifacts,json=flowPercentageArtifacts,proto3" json:"flow_percentage_artifacts,omitempty"` // [default = 0.5];
	FuelingEnabled          bool                   `protobuf:"varint,7,opt,name=fueling_enabled,json=fuelingEnabled,proto3" json:"fueling_enabled,omitempty"`                               // [default = true];
	InfusingEnabled         bool                   `protobuf:"varint,8,opt,name=infusing_enabled,json=infusingEnabled,proto3" json:"infusing_enabled,omitempty"`                            // [default = true];
	LastFueledShip          MissionInfo_Spaceship  `protobuf:"varint,9,opt,name=last_fueled_ship,json=lastFueledShip,proto3,enum=MissionInfo_Spaceship" json:"last_fueled_ship,omitempty"`
	InventoryScore          float64                `protobuf:"fixed64,10,opt,name=inventory_score,json=inventoryScore,proto3" json:"inventory_score,omitempty"`
	Enabled                 bool                   `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	IntroShown              bool                   `protobuf:"varint,12,opt,name=intro_shown,json=introShown,proto3" json:"intro_shown,omitempty"`
}

func (x *FirstContact_Payload_Artifacts) Reset() {
	*x = FirstContact_Payload_Artifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Artifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Artifacts) ProtoMessage() {}

func (x *FirstContact_Payload_Artifacts) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Artifacts.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Artifacts) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 4}
}

func (x *FirstContact_Payload_Artifacts) GetInfusing() bool {
	if x != nil {
		return x.Infusing
	}
	return false
}

func (x *FirstContact_Payload_Artifacts) GetItemBeingInfused() *ArtifactInventoryItem {
	if x != nil {
		return x.ItemBeingInfused
	}
	return nil
}

func (x *FirstContact_Payload_Artifacts) GetSpecBeingInfused() *ArtifactSpec {
	if x != nil {
		return x.SpecBeingInfused
	}
	return nil
}

func (x *FirstContact_Payload_Artifacts) GetEggTypeInfusing() EggType {
	if x != nil {
		return x.EggTypeInfusing
	}
	return EggType_INVALID_EGG
}

func (x *FirstContact_Payload_Artifacts) GetInfusingEggsRequired() float64 {
	if x != nil {
		return x.InfusingEggsRequired
	}
	return 0
}

func (x *FirstContact_Payload_Artifacts) GetEggsInfused() float64 {
	if x != nil {
		return x.EggsInfused
	}
	return 0
}

func (x *FirstContact_Payload_Artifacts) GetFlowPercentageArtifacts() float64 {
	if x != nil {
		return x.FlowPercentageArtifacts
	}
	return 0
}

func (x *FirstContact_Payload_Artifacts) GetFuelingEnabled() bool {
	if x != nil {
		return x.FuelingEnabled
	}
	return false
}

func (x *FirstContact_Payload_Artifacts) GetInfusingEnabled() bool {
	if x != nil {
		return x.InfusingEnabled
	}
	return false
}

func (x *FirstContact_Payload_Artifacts) GetLastFueledShip() MissionInfo_Spaceship {
	if x != nil {
		return x.LastFueledShip
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *FirstContact_Payload_Artifacts) GetInventoryScore() float64 {
	if x != nil {
		return x.InventoryScore
	}
	return 0
}

func (x *FirstContact_Payload_Artifacts) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FirstContact_Payload_Artifacts) GetIntroShown() bool {
	if x != nil {
		return x.IntroShown
	}
	return false
}

type FirstContact_Payload_Progress_Boost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FirstContact_Payload_Progress_Boost) Reset() {
	*x = FirstContact_Payload_Progress_Boost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstContact_Payload_Progress_Boost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstContact_Payload_Progress_Boost) ProtoMessage() {}

func (x *FirstContact_Payload_Progress_Boost) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstContact_Payload_Progress_Boost.ProtoReflect.Descriptor instead.
func (*FirstContact_Payload_Progress_Boost) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{3, 0, 2, 0}
}

func (x *FirstContact_Payload_Progress_Boost) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirstContact_Payload_Progress_Boost) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ContractProperties_RewardTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *ContractProperties_RewardTier) Reset() {
	*x = ContractProperties_RewardTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProperties_RewardTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProperties_RewardTier) ProtoMessage() {}

func (x *ContractProperties_RewardTier) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProperties_RewardTier.ProtoReflect.Descriptor instead.
func (*ContractProperties_RewardTier) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ContractProperties_RewardTier) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ArtifactsDB_ActiveArtifactSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occupied bool   `protobuf:"varint,1,opt,name=occupied,proto3" json:"occupied,omitempty"`
	ItemId   uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ArtifactsDB_ActiveArtifactSlot) Reset() {
	*x = ArtifactsDB_ActiveArtifactSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_ActiveArtifactSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSlot) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSlot) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSlot.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSlot) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetOccupied() bool {
	if x != nil {
		return x.Occupied
	}
	return false
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type ArtifactsDB_ActiveArtifactSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,1,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *ArtifactsDB_ActiveArtifactSet) Reset() {
	*x = ArtifactsDB_ActiveArtifactSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_ActiveArtifactSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSet) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSet) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSet.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSet) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ArtifactsDB_ActiveArtifactSet) GetSlots() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type ArtifactsDB_CraftableArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ArtifactSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Seen  bool          `protobuf:"varint,2,opt,name=seen,proto3" json:"seen,omitempty"`
	Count uint32        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ArtifactsDB_CraftableArtifact) Reset() {
	*x = ArtifactsDB_CraftableArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_CraftableArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_CraftableArtifact) ProtoMessage() {}

func (x *ArtifactsDB_CraftableArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_CraftableArtifact.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_CraftableArtifact) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{10, 2}
}

func (x *ArtifactsDB_CraftableArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsDB_CraftableArtifact) GetSeen() bool {
	if x != nil {
		return x.Seen
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MissionInfo_Fuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Egg    EggType `protobuf:"varint,1,opt,name=egg,proto3,enum=EggType" json:"egg,omitempty"`
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *MissionInfo_Fuel) Reset() {
	*x = MissionInfo_Fuel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo_Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo_Fuel) ProtoMessage() {}

func (x *MissionInfo_Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo_Fuel.ProtoReflect.Descriptor instead.
func (*MissionInfo_Fuel) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{15, 0}
}

func (x *MissionInfo_Fuel) GetEgg() EggType {
	if x != nil {
		return x.Egg
	}
	return EggType_INVALID_EGG
}

func (x *MissionInfo_Fuel) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CoopStatus_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EggsLaid float64 `protobuf:"fixed64,3,opt,name=eggs_laid,json=eggsLaid,proto3" json:"eggs_laid,omitempty"`
	Active   bool    `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"` // "snoozers" who haven't reported in in 24 hours
	// have this field set to false
	X5              int32   `protobuf:"varint,5,opt,name=_5,json=5,proto3" json:"_5,omitempty"` // unknown; example: 1 or 2
	EggsPerSecond   float64 `protobuf:"fixed64,6,opt,name=eggs_per_second,json=eggsPerSecond,proto3" json:"eggs_per_second,omitempty"`
	X7              int32   `protobuf:"varint,7,opt,name=_7,json=7,proto3" json:"_7,omitempty"`                                               // unknown; example: 7
	EarningBonusOom float64 `protobuf:"fixed64,11,opt,name=earning_bonus_oom,json=earningBonusOom,proto3" json:"earning_bonus_oom,omitempty"` // EB is 10^(earning_bonus_oom + 2)%
	Tokens          int32   `protobuf:"varint,12,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CoopStatus_Member) Reset() {
	*x = CoopStatus_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopStatus_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopStatus_Member) ProtoMessage() {}

func (x *CoopStatus_Member) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopStatus_Member.ProtoReflect.Descriptor instead.
func (*CoopStatus_Member) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CoopStatus_Member) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoopStatus_Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoopStatus_Member) GetEggsLaid() float64 {
	if x != nil {
		return x.EggsLaid
	}
	return 0
}

func (x *CoopStatus_Member) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CoopStatus_Member) GetX5() int32 {
	if x != nil {
		return x.X5
	}
	return 0
}

func (x *CoopStatus_Member) GetEggsPerSecond() float64 {
	if x != nil {
		return x.EggsPerSecond
	}
	return 0
}

func (x *CoopStatus_Member) GetX7() int32 {
	if x != nil {
		return x.X7
	}
	return 0
}

func (x *CoopStatus_Member) GetEarningBonusOom() float64 {
	if x != nil {
		return x.EarningBonusOom
	}
	return 0
}

func (x *CoopStatus_Member) GetTokens() int32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

type CoopStatus_TokenGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GifterId   string `protobuf:"bytes,1,opt,name=gifter_id,json=gifterId,proto3" json:"gifter_id,omitempty"`
	Tokens     int32  `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty"`
	GifterName string `protobuf:"bytes,3,opt,name=gifter_name,json=gifterName,proto3" json:"gifter_name,omitempty"`
}

func (x *CoopStatus_TokenGift) Reset() {
	*x = CoopStatus_TokenGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopStatus_TokenGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopStatus_TokenGift) ProtoMessage() {}

func (x *CoopStatus_TokenGift) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopStatus_TokenGift.ProtoReflect.Descriptor instead.
func (*CoopStatus_TokenGift) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{17, 1}
}

func (x *CoopStatus_TokenGift) GetGifterId() string {
	if x != nil {
		return x.GifterId
	}
	return ""
}

func (x *CoopStatus_TokenGift) GetTokens() int32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *CoopStatus_TokenGift) GetGifterName() string {
	if x != nil {
		return x.GifterName
	}
	return ""
}

type Periodicals_Sales struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales []*Sale `protobuf:"bytes,1,rep,name=sales,proto3" json:"sales,omitempty"`
}

func (x *Periodicals_Sales) Reset() {
	*x = Periodicals_Sales{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodicals_Sales) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodicals_Sales) ProtoMessage() {}

func (x *Periodicals_Sales) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodicals_Sales.ProtoReflect.Descriptor instead.
func (*Periodicals_Sales) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Periodicals_Sales) GetSales() []*Sale {
	if x != nil {
		return x.Sales
	}
	return nil
}

type Periodicals_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Periodicals_Events) Reset() {
	*x = Periodicals_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodicals_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodicals_Events) ProtoMessage() {}

func (x *Periodicals_Events) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodicals_Events.ProtoReflect.Descriptor instead.
func (*Periodicals_Events) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Periodicals_Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Periodicals_Contracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contracts         []*ContractProperties `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	ResponseTimestamp float64               `protobuf:"fixed64,2,opt,name=response_timestamp,json=responseTimestamp,proto3" json:"response_timestamp,omitempty"` // epoch seconds; as to why the hell the
}

func (x *Periodicals_Contracts) Reset() {
	*x = Periodicals_Contracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Periodicals_Contracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Periodicals_Contracts) ProtoMessage() {}

func (x *Periodicals_Contracts) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Periodicals_Contracts.ProtoReflect.Descriptor instead.
func (*Periodicals_Contracts) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{19, 2}
}

func (x *Periodicals_Contracts) GetContracts() []*ContractProperties {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *Periodicals_Contracts) GetResponseTimestamp() float64 {
	if x != nil {
		return x.ResponseTimestamp
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ship                     MissionInfo_Spaceship                                        `protobuf:"varint,1,opt,name=ship,proto3,enum=MissionInfo_Spaceship" json:"ship,omitempty"`
	Durations                []*ArtifactsConfigurationResponse_MissionParameters_Duration `protobuf:"bytes,3,rep,name=durations,proto3" json:"durations,omitempty"`
	LevelMissionRequirements []uint32                                                     `protobuf:"varint,4,rep,packed,name=level_mission_requirements,json=levelMissionRequirements,proto3" json:"level_mission_requirements,omitempty"`
	Capacity_DEPRECATED      uint32                                                       `protobuf:"varint,2,opt,name=capacity_DEPRECATED,json=capacityDEPRECATED,proto3" json:"capacity_DEPRECATED,omitempty"`
}

func (x *ArtifactsConfigurationResponse_MissionParameters) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_MissionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetShip() MissionInfo_Spaceship {
	if x != nil {
		return x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetDurations() []*ArtifactsConfigurationResponse_MissionParameters_Duration {
	if x != nil {
		return x.Durations
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetLevelMissionRequirements() []uint32 {
	if x != nil {
		return x.LevelMissionRequirements
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetCapacity_DEPRECATED() uint32 {
	if x != nil {
		return x.Capacity_DEPRECATED
	}
	return 0
}

type ArtifactsConfigurationResponse_ArtifactParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec                *ArtifactSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	BaseQuality         float64       `protobuf:"fixed64,2,opt,name=base_quality,json=baseQuality,proto3" json:"base_quality,omitempty"`
	OddsMultiplier      float64       `protobuf:"fixed64,4,opt,name=odds_multiplier,json=oddsMultiplier,proto3" json:"odds_multiplier,omitempty"`
	Value               float64       `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	CraftingPrice       float64       `protobuf:"fixed64,5,opt,name=crafting_price,json=craftingPrice,proto3" json:"crafting_price,omitempty"`
	CraftingPriceLow    float64       `protobuf:"fixed64,6,opt,name=crafting_price_low,json=craftingPriceLow,proto3" json:"crafting_price_low,omitempty"`
	CraftingPriceDomain uint32        `protobuf:"varint,7,opt,name=crafting_price_domain,json=craftingPriceDomain,proto3" json:"crafting_price_domain,omitempty"`
	CraftingPriceCurve  float64       `protobuf:"fixed64,8,opt,name=crafting_price_curve,json=craftingPriceCurve,proto3" json:"crafting_price_curve,omitempty"`
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) Reset() {
	*x = ArtifactsConfigurationResponse_ArtifactParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_ArtifactParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_ArtifactParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_ArtifactParameters) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{23, 1}
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetBaseQuality() float64 {
	if x != nil {
		return x.BaseQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetOddsMultiplier() float64 {
	if x != nil {
		return x.OddsMultiplier
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPrice() float64 {
	if x != nil {
		return x.CraftingPrice
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceLow() float64 {
	if x != nil {
		return x.CraftingPriceLow
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceDomain() uint32 {
	if x != nil {
		return x.CraftingPriceDomain
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceCurve() float64 {
	if x != nil {
		return x.CraftingPriceCurve
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters_Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationType      MissionInfo_DurationType `protobuf:"varint,1,opt,name=duration_type,json=durationType,proto3,enum=MissionInfo_DurationType" json:"duration_type,omitempty"`
	Seconds           float64                  `protobuf:"fixed64,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Quality           float32                  `protobuf:"fixed32,3,opt,name=quality,proto3" json:"quality,omitempty"`
	MinQuality        float32                  `protobuf:"fixed32,4,opt,name=min_quality,json=minQuality,proto3" json:"min_quality,omitempty"`
	MaxQuality        float32                  `protobuf:"fixed32,5,opt,name=max_quality,json=maxQuality,proto3" json:"max_quality,omitempty"`
	Capacity          uint32                   `protobuf:"varint,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	LevelCapacityBump uint32                   `protobuf:"varint,7,opt,name=level_capacity_bump,json=levelCapacityBump,proto3" json:"level_capacity_bump,omitempty"`
	LevelQualityBump  float32                  `protobuf:"fixed32,8,opt,name=level_quality_bump,json=levelQualityBump,proto3" json:"level_quality_bump,omitempty"`
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters_Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters_Duration.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters_Duration) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{23, 0, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetDurationType() MissionInfo_DurationType {
	if x != nil {
		return x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetSeconds() float64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMinQuality() float32 {
	if x != nil {
		return x.MinQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMaxQuality() float32 {
	if x != nil {
		return x.MaxQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetLevelCapacityBump() uint32 {
	if x != nil {
		return x.LevelCapacityBump
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetLevelQualityBump() float32 {
	if x != nil {
		return x.LevelQualityBump
	}
	return 0
}

type LiveConfig_BoostsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemConfigs          []*LiveConfig_BoostsConfig_ItemConfig `protobuf:"bytes,1,rep,name=item_configs,json=itemConfigs,proto3" json:"item_configs,omitempty"`
	CashBoostCooloffTime float64                               `protobuf:"fixed64,2,opt,name=cash_boost_cooloff_time,json=cashBoostCooloffTime,proto3" json:"cash_boost_cooloff_time,omitempty"`
}

func (x *LiveConfig_BoostsConfig) Reset() {
	*x = LiveConfig_BoostsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig_BoostsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_BoostsConfig) ProtoMessage() {}

func (x *LiveConfig_BoostsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_BoostsConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_BoostsConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26, 0}
}

func (x *LiveConfig_BoostsConfig) GetItemConfigs() []*LiveConfig_BoostsConfig_ItemConfig {
	if x != nil {
		return x.ItemConfigs
	}
	return nil
}

func (x *LiveConfig_BoostsConfig) GetCashBoostCooloffTime() float64 {
	if x != nil {
		return x.CashBoostCooloffTime
	}
	return 0
}

type LiveConfig_GiftConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftConfigs                      []*LiveConfig_GiftConfig_GiftValueConfig `protobuf:"bytes,9,rep,name=gift_configs,json=giftConfigs,proto3" json:"gift_configs,omitempty"`
	GiftMuMinSpent                   float64                                  `protobuf:"fixed64,10,opt,name=gift_mu_min_spent,json=giftMuMinSpent,proto3" json:"gift_mu_min_spent,omitempty"`
	GiftMuMaxSpent                   float64                                  `protobuf:"fixed64,11,opt,name=gift_mu_max_spent,json=giftMuMaxSpent,proto3" json:"gift_mu_max_spent,omitempty"`
	GiftMuOverallMult                float64                                  `protobuf:"fixed64,12,opt,name=gift_mu_overall_mult,json=giftMuOverallMult,proto3" json:"gift_mu_overall_mult,omitempty"`
	PackageInterval                  float64                                  `protobuf:"fixed64,1,opt,name=package_interval,json=packageInterval,proto3" json:"package_interval,omitempty"`
	VideoOfferInterval               float64                                  `protobuf:"fixed64,2,opt,name=video_offer_interval,json=videoOfferInterval,proto3" json:"video_offer_interval,omitempty"`
	VideoOfferIntervalContract       float64                                  `protobuf:"fixed64,3,opt,name=video_offer_interval_contract,json=videoOfferIntervalContract,proto3" json:"video_offer_interval_contract,omitempty"`
	VideoOfferIntervalPiggyFull      float64                                  `protobuf:"fixed64,4,opt,name=video_offer_interval_piggy_full,json=videoOfferIntervalPiggyFull,proto3" json:"video_offer_interval_piggy_full,omitempty"`
	VideoOfferIntervalPiggyExtraFull float64                                  `protobuf:"fixed64,5,opt,name=video_offer_interval_piggy_extra_full,json=videoOfferIntervalPiggyExtraFull,proto3" json:"video_offer_interval_piggy_extra_full,omitempty"`
	VideoResetOnIdle                 bool                                     `protobuf:"varint,14,opt,name=video_reset_on_idle,json=videoResetOnIdle,proto3" json:"video_reset_on_idle,omitempty"`
	PackageIntervalContract          float64                                  `protobuf:"fixed64,6,opt,name=package_interval_contract,json=packageIntervalContract,proto3" json:"package_interval_contract,omitempty"`
	PackageIntervalPiggyFull         float64                                  `protobuf:"fixed64,7,opt,name=package_interval_piggy_full,json=packageIntervalPiggyFull,proto3" json:"package_interval_piggy_full,omitempty"`
	PackageIntervalPiggyExtraFull    float64                                  `protobuf:"fixed64,8,opt,name=package_interval_piggy_extra_full,json=packageIntervalPiggyExtraFull,proto3" json:"package_interval_piggy_extra_full,omitempty"`
	PackageResetOnIdle               bool                                     `protobuf:"varint,13,opt,name=package_reset_on_idle,json=packageResetOnIdle,proto3" json:"package_reset_on_idle,omitempty"`
}

func (x *LiveConfig_GiftConfig) Reset() {
	*x = LiveConfig_GiftConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig_GiftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_GiftConfig) ProtoMessage() {}

func (x *LiveConfig_GiftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_GiftConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_GiftConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26, 1}
}

func (x *LiveConfig_GiftConfig) GetGiftConfigs() []*LiveConfig_GiftConfig_GiftValueConfig {
	if x != nil {
		return x.GiftConfigs
	}
	return nil
}

func (x *LiveConfig_GiftConfig) GetGiftMuMinSpent() float64 {
	if x != nil {
		return x.GiftMuMinSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetGiftMuMaxSpent() float64 {
	if x != nil {
		return x.GiftMuMaxSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetGiftMuOverallMult() float64 {
	if x != nil {
		return x.GiftMuOverallMult
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageInterval() float64 {
	if x != nil {
		return x.PackageInterval
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferInterval() float64 {
	if x != nil {
		return x.VideoOfferInterval
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalContract() float64 {
	if x != nil {
		return x.VideoOfferIntervalContract
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalPiggyFull() float64 {
	if x != nil {
		return x.VideoOfferIntervalPiggyFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalPiggyExtraFull() float64 {
	if x != nil {
		return x.VideoOfferIntervalPiggyExtraFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoResetOnIdle() bool {
	if x != nil {
		return x.VideoResetOnIdle
	}
	return false
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalContract() float64 {
	if x != nil {
		return x.PackageIntervalContract
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalPiggyFull() float64 {
	if x != nil {
		return x.PackageIntervalPiggyFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalPiggyExtraFull() float64 {
	if x != nil {
		return x.PackageIntervalPiggyExtraFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageResetOnIdle() bool {
	if x != nil {
		return x.PackageResetOnIdle
	}
	return false
}

type LiveConfig_MiscConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskToTrack            bool    `protobuf:"varint,1,opt,name=ask_to_track,json=askToTrack,proto3" json:"ask_to_track,omitempty"`
	AskToTrackMinSoulEggs float64 `protobuf:"fixed64,2,opt,name=ask_to_track_min_soul_eggs,json=askToTrackMinSoulEggs,proto3" json:"ask_to_track_min_soul_eggs,omitempty"`
	AskToTrackMessage     string  `protobuf:"bytes,3,opt,name=ask_to_track_message,json=askToTrackMessage,proto3" json:"ask_to_track_message,omitempty"`
}

func (x *LiveConfig_MiscConfig) Reset() {
	*x = LiveConfig_MiscConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig_MiscConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_MiscConfig) ProtoMessage() {}

func (x *LiveConfig_MiscConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_MiscConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_MiscConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26, 2}
}

func (x *LiveConfig_MiscConfig) GetAskToTrack() bool {
	if x != nil {
		return x.AskToTrack
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetAskToTrackMinSoulEggs() float64 {
	if x != nil {
		return x.AskToTrackMinSoulEggs
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetAskToTrackMessage() string {
	if x != nil {
		return x.AskToTrackMessage
	}
	return ""
}

type LiveConfig_BoostsConfig_ItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoostId    string  `protobuf:"bytes,1,opt,name=boost_id,json=boostId,proto3" json:"boost_id,omitempty"`
	Price      uint32  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	TokenPrice uint32  `protobuf:"varint,3,opt,name=token_price,json=tokenPrice,proto3" json:"token_price,omitempty"`
	SeRequired float64 `protobuf:"fixed64,4,opt,name=se_required,json=seRequired,proto3" json:"se_required,omitempty"`
}

func (x *LiveConfig_BoostsConfig_ItemConfig) Reset() {
	*x = LiveConfig_BoostsConfig_ItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig_BoostsConfig_ItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_BoostsConfig_ItemConfig) ProtoMessage() {}

func (x *LiveConfig_BoostsConfig_ItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_BoostsConfig_ItemConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_BoostsConfig_ItemConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26, 0, 0}
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetBoostId() string {
	if x != nil {
		return x.BoostId
	}
	return ""
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetTokenPrice() uint32 {
	if x != nil {
		return x.TokenPrice
	}
	return 0
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetSeRequired() float64 {
	if x != nil {
		return x.SeRequired
	}
	return 0
}

type LiveConfig_GiftConfig_GiftValueConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId   string  `protobuf:"bytes,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	Amount   float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	RandMin  float64 `protobuf:"fixed64,2,opt,name=rand_min,json=randMin,proto3" json:"rand_min,omitempty"`
	RandMax  float64 `protobuf:"fixed64,3,opt,name=rand_max,json=randMax,proto3" json:"rand_max,omitempty"`
	VideoMin float64 `protobuf:"fixed64,5,opt,name=video_min,json=videoMin,proto3" json:"video_min,omitempty"`
	VideoMax float64 `protobuf:"fixed64,6,opt,name=video_max,json=videoMax,proto3" json:"video_max,omitempty"`
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) Reset() {
	*x = LiveConfig_GiftConfig_GiftValueConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_GiftConfig_GiftValueConfig) ProtoMessage() {}

func (x *LiveConfig_GiftConfig_GiftValueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_GiftConfig_GiftValueConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_GiftConfig_GiftValueConfig) Descriptor() ([]byte, []int) {
	return file_ei_proto_rawDescGZIP(), []int{26, 1, 0}
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetRandMin() float64 {
	if x != nil {
		return x.RandMin
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetRandMax() float64 {
	if x != nil {
		return x.RandMax
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetVideoMin() float64 {
	if x != nil {
		return x.VideoMin
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetVideoMax() float64 {
	if x != nil {
		return x.VideoMax
	}
	return 0
}

var File_ei_proto protoreflect.FileDescriptor

var file_ei_proto_rawDesc = []byte{
	0x0a, 0x08, 0x65, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xad, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x27, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0xa3, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x91, 0x16, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0xd5, 0x15, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x61,
	0x72, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x61, 0x72, 0x6d,
	0x52, 0x05, 0x66, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x64, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x44, 0x62, 0x1a, 0xb6, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x66, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x66, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x31,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0xea, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f,
	0x6c, 0x61, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x61, 0x72, 0x6d,
	0x45, 0x67, 0x67, 0x73, 0x4c, 0x61, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x6e,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x1a, 0xb1, 0x05, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45, 0x67, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65,
	0x67, 0x67, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45,
	0x67, 0x67, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x45, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x45, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0e, 0x65, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x11, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65,
	0x63, 0x79, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x45, 0x67, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x6e, 0x75, 0x6d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x06, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67,
	0x73, 0x1a, 0x2d, 0x0a, 0x05, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xd5, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0xef, 0x04, 0x0a, 0x09, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x44, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x42, 0x65, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x11, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x08, 0x2e, 0x45, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x67, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x67, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x67, 0x67, 0x73, 0x49, 0x6e, 0x66,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x75, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x65, 0x6c,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x22, 0x87, 0x04, 0x0a, 0x04, 0x46,
	0x61, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x45, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x45, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x67, 0x73,
	0x5f, 0x6c, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x67, 0x67,
	0x73, 0x4c, 0x61, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x67,
	0x67, 0x73, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6c,
	0x6f, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x69, 0x6c, 0x6f, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61,
	0x62, 0x69, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x68, 0x61,
	0x62, 0x69, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x34, 0x0a, 0x0c, 0x45, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb1, 0x03, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x34, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x37, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x37, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x31, 0x30,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x31, 0x30, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x22, 0xf0, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x45, 0x67, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65,
	0x72, 0x73, 0x1a, 0x2f, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0d,
	0x0a, 0x02, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x02,
	0x5f, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x36, 0x22, 0x89, 0x07, 0x0a, 0x0b,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x12, 0x3f, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x49,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x4a, 0x0a, 0x11, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x0c, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x03, 0x65, 0x67, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x45, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x65, 0x67, 0x67, 0x22, 0x8a, 0x09, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x45, 0x4f, 0x44, 0x59, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x44,
	0x41, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x41, 0x4b,
	0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x49, 0x44, 0x41, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x47, 0x47, 0x45, 0x4e, 0x44, 0x49, 0x4c,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4e,
	0x45, 0x43, 0x4b, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x41,
	0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x55, 0x53, 0x53, 0x45,
	0x54, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x49,
	0x43, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4f, 0x46, 0x5f,
	0x42, 0x41, 0x53, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x4f, 0x45, 0x4e,
	0x49, 0x58, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x55, 0x4e, 0x47, 0x53, 0x54, 0x45, 0x4e, 0x5f, 0x41, 0x4e, 0x4b, 0x48, 0x10, 0x0c, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x55, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4f,
	0x43, 0x48, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x52,
	0x41, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55,
	0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x43, 0x55, 0x42, 0x45, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x45,
	0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x5f,
	0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x43, 0x48,
	0x59, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x1a, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x53, 0x53, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x4c,
	0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x43, 0x4c, 0x45, 0x10, 0x1c,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x54, 0x41, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x55, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x52, 0x43, 0x55,
	0x52, 0x59, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41,
	0x43, 0x48, 0x59, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x45, 0x52, 0x52, 0x41, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x28, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x58, 0x54, 0x52, 0x41, 0x54, 0x45, 0x52, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x0d, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x4e, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x54,
	0x45, 0x4e, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x4f,
	0x43, 0x4b, 0x53, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x49, 0x45, 0x4e, 0x5f, 0x57,
	0x4f, 0x4f, 0x44, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x45, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x55,
	0x5f, 0x43, 0x45, 0x54, 0x49, 0x5f, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x45,
	0x4c, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x49, 0x44, 0x41, 0x4e, 0x49, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x4e,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c,
	0x45, 0x53, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x10, 0x29, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10,
	0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x41, 0x4e,
	0x49, 0x55, 0x4d, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46,
	0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x55, 0x4e,
	0x41, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46,
	0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x31, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x52, 0x52, 0x41, 0x5f, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x32, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x34, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x90, 0x4e, 0x22, 0x48, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x46, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x53,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x55, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x06,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x10, 0x03, 0x22, 0x45, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f,
	0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x98, 0x01, 0x0a,
	0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xda, 0x06, 0x0a, 0x0b,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x3a,
	0x0a, 0x04, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x45, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x65,
	0x67, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x49, 0x43,
	0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49,
	0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x43, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x4c, 0x4c, 0x45,
	0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x52, 0x45, 0x4c, 0x4c, 0x49, 0x48, 0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x52,
	0x56, 0x45, 0x54, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41, 0x4c, 0x45, 0x47,
	0x47, 0x54, 0x49, 0x43, 0x41, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x49, 0x43, 0x4b,
	0x46, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4f, 0x59, 0x45, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x4e, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x53, 0x45, 0x10, 0x09, 0x22, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x55, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43,
	0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x0f,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x14, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x19, 0x22, 0x3b, 0x0a, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x55,
	0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x6c, 0x0a, 0x18, 0x43, 0x6f, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6c,
	0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x67, 0x67, 0x73, 0x4c,
	0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x36, 0x12,
	0x49, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x38,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x38, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x36, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x67, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x67, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x1a, 0xeb, 0x01,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x6c, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x65, 0x67, 0x67, 0x73, 0x4c, 0x61, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x35,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x02, 0x5f, 0x37, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x37, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x4f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x61, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x69, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3,
	0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67,
	0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd9, 0x02, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x73, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x1a, 0x24, 0x0a, 0x05, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x1a, 0x28, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x6d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x81, 0x01, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x24, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x09, 0x0a,
	0x1e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xc5, 0x04, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x04,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x1a, 0xba, 0x02, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x6d, 0x70, 0x1a, 0xd4,
	0x02, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x64, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x64, 0x64, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75,
	0x65, 0x6c, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x61, 0x6e, 0x6b,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x62, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x44, 0x42, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x67, 0x12, 0x2c, 0x0a,
	0x0b, 0x64, 0x6c, 0x63, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x4c, 0x43, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x0a, 0x64, 0x6c, 0x63, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0xfc, 0x0c, 0x0a, 0x0a,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x37, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6d, 0x69,
	0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x8e, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6f, 0x6c, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x63, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6f,
	0x6c, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xf1, 0x07, 0x0a, 0x0a, 0x47, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x67, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x4d, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x4d,
	0x75, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x4f, 0x0a, 0x25, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x50, 0x69, 0x67, 0x67, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x75, 0x6c,
	0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x21, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x69, 0x67, 0x67, 0x79, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x0f, 0x47, 0x69, 0x66,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64,
	0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x1a, 0x9a, 0x01,
	0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x1a, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x69,
	0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x70, 0x22, 0x29, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x42, 0x12, 0x1f,
	0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x7b, 0x0a, 0x07, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x2c, 0x0a, 0x0a,
	0x44, 0x4c, 0x43, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x4c, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0x34, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02,
	0x2a, 0x83, 0x03, 0x0a, 0x07, 0x45, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x47, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x44, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x46, 0x55, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55,
	0x4d, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x4d, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x4f, 0x4e, 0x10, 0x0a, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x10, 0x0b, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x49, 0x47, 0x59, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e,
	0x54, 0x49, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41,
	0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x41,
	0x49, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41, 0x10, 0x11, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x12, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x13,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x64, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x49, 0x52, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x55, 0x4d, 0x50, 0x4b, 0x49, 0x4e, 0x10, 0x68, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xe8, 0x07, 0x2a, 0xd2, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x56, 0x41, 0x4e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x57, 0x45, 0x4e, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x54,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x45, 0x47, 0x41, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x09, 0x12, 0x17, 0x0a,
	0x13, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4c,
	0x4f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x0b, 0x2a, 0x58, 0x0a, 0x0a, 0x54,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4e,
	0x5a, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c,
	0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x10, 0x05, 0x2a, 0xf2, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x4c, 0x44,
	0x45, 0x4e, 0x5f, 0x45, 0x47, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x55, 0x4c,
	0x5f, 0x45, 0x47, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45,
	0x43, 0x59, 0x5f, 0x45, 0x47, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x49, 0x43,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x49, 0x47, 0x47, 0x59, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x45, 0x4e, 0x5f, 0x45, 0x47, 0x47, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x43, 0x41, 0x53, 0x45, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x64, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ei_proto_rawDescOnce sync.Once
	file_ei_proto_rawDescData = file_ei_proto_rawDesc
)

func file_ei_proto_rawDescGZIP() []byte {
	file_ei_proto_rawDescOnce.Do(func() {
		file_ei_proto_rawDescData = protoimpl.X.CompressGZIP(file_ei_proto_rawDescData)
	})
	return file_ei_proto_rawDescData
}

var file_ei_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_ei_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_ei_proto_goTypes = []interface{}{
	(Platform)(0),                                             // 0: Platform
	(EggType)(0),                                              // 1: EggType
	(VehicleType)(0),                                          // 2: VehicleType
	(TrophyType)(0),                                           // 3: TrophyType
	(RewardType)(0),                                           // 4: RewardType
	(ArtifactSpec_Name)(0),                                    // 5: ArtifactSpec.Name
	(ArtifactSpec_Level)(0),                                   // 6: ArtifactSpec.Level
	(ArtifactSpec_Rarity)(0),                                  // 7: ArtifactSpec.Rarity
	(ArtifactSpec_Type)(0),                                    // 8: ArtifactSpec.Type
	(MissionInfo_Spaceship)(0),                                // 9: MissionInfo.Spaceship
	(MissionInfo_Status)(0),                                   // 10: MissionInfo.Status
	(MissionInfo_DurationType)(0),                             // 11: MissionInfo.DurationType
	(*AuthenticatedMessage)(nil),                              // 12: AuthenticatedMessage
	(*FirstContactRequestPayload)(nil),                        // 13: FirstContactRequestPayload
	(*BasicRequestInfo)(nil),                                  // 14: BasicRequestInfo
	(*FirstContact)(nil),                                      // 15: FirstContact
	(*Farm)(nil),                                              // 16: Farm
	(*Research)(nil),                                          // 17: Research
	(*EpicResearch)(nil),                                      // 18: EpicResearch
	(*Contract)(nil),                                          // 19: Contract
	(*ContractProperties)(nil),                                // 20: ContractProperties
	(*Reward)(nil),                                            // 21: Reward
	(*ArtifactsDB)(nil),                                       // 22: ArtifactsDB
	(*ArtifactSpec)(nil),                                      // 23: ArtifactSpec
	(*ArtifactInventoryItem)(nil),                             // 24: ArtifactInventoryItem
	(*CompleteArtifact)(nil),                                  // 25: CompleteArtifact
	(*InventorySlot)(nil),                                     // 26: InventorySlot
	(*MissionInfo)(nil),                                       // 27: MissionInfo
	(*CoopStatusRequestPayload)(nil),                          // 28: CoopStatusRequestPayload
	(*CoopStatus)(nil),                                        // 29: CoopStatus
	(*GetPeriodicalsRequestPayload)(nil),                      // 30: GetPeriodicalsRequestPayload
	(*Periodicals)(nil),                                       // 31: Periodicals
	(*Sale)(nil),                                              // 32: Sale
	(*Event)(nil),                                             // 33: Event
	(*ArtifactsConfigurationRequestPayload)(nil),              // 34: ArtifactsConfigurationRequestPayload
	(*ArtifactsConfigurationResponse)(nil),                    // 35: ArtifactsConfigurationResponse
	(*ConfigRequest)(nil),                                     // 36: ConfigRequest
	(*ConfigResponse)(nil),                                    // 37: ConfigResponse
	(*LiveConfig)(nil),                                        // 38: LiveConfig
	(*InGameMail)(nil),                                        // 39: InGameMail
	(*MailDB)(nil),                                            // 40: MailDB
	(*DLCItem)(nil),                                           // 41: DLCItem
	(*DLCCatalog)(nil),                                        // 42: DLCCatalog
	(*FirstContact_Payload)(nil),                              // 43: FirstContact.Payload
	(*FirstContact_Payload_Settings)(nil),                     // 44: FirstContact.Payload.Settings
	(*FirstContact_Payload_Stats)(nil),                        // 45: FirstContact.Payload.Stats
	(*FirstContact_Payload_Progress)(nil),                     // 46: FirstContact.Payload.Progress
	(*FirstContact_Payload_Contracts)(nil),                    // 47: FirstContact.Payload.Contracts
	(*FirstContact_Payload_Artifacts)(nil),                    // 48: FirstContact.Payload.Artifacts
	(*FirstContact_Payload_Progress_Boost)(nil),               // 49: FirstContact.Payload.Progress.Boost
	(*ContractProperties_RewardTier)(nil),                     // 50: ContractProperties.RewardTier
	(*ArtifactsDB_ActiveArtifactSlot)(nil),                    // 51: ArtifactsDB.ActiveArtifactSlot
	(*ArtifactsDB_ActiveArtifactSet)(nil),                     // 52: ArtifactsDB.ActiveArtifactSet
	(*ArtifactsDB_CraftableArtifact)(nil),                     // 53: ArtifactsDB.CraftableArtifact
	(*MissionInfo_Fuel)(nil),                                  // 54: MissionInfo.Fuel
	(*CoopStatus_Member)(nil),                                 // 55: CoopStatus.Member
	(*CoopStatus_TokenGift)(nil),                              // 56: CoopStatus.TokenGift
	(*Periodicals_Sales)(nil),                                 // 57: Periodicals.Sales
	(*Periodicals_Events)(nil),                                // 58: Periodicals.Events
	(*Periodicals_Contracts)(nil),                             // 59: Periodicals.Contracts
	(*ArtifactsConfigurationResponse_MissionParameters)(nil),  // 60: ArtifactsConfigurationResponse.MissionParameters
	(*ArtifactsConfigurationResponse_ArtifactParameters)(nil), // 61: ArtifactsConfigurationResponse.ArtifactParameters
	(*ArtifactsConfigurationResponse_MissionParameters_Duration)(nil), // 62: ArtifactsConfigurationResponse.MissionParameters.Duration
	(*LiveConfig_BoostsConfig)(nil),                                   // 63: LiveConfig.BoostsConfig
	(*LiveConfig_GiftConfig)(nil),                                     // 64: LiveConfig.GiftConfig
	(*LiveConfig_MiscConfig)(nil),                                     // 65: LiveConfig.MiscConfig
	(*LiveConfig_BoostsConfig_ItemConfig)(nil),                        // 66: LiveConfig.BoostsConfig.ItemConfig
	(*LiveConfig_GiftConfig_GiftValueConfig)(nil),                     // 67: LiveConfig.GiftConfig.GiftValueConfig
}
var file_ei_proto_depIdxs = []int32{
	14, // 0: FirstContactRequestPayload.rinfo:type_name -> BasicRequestInfo
	0,  // 1: FirstContactRequestPayload.platform:type_name -> Platform
	43, // 2: FirstContact.data:type_name -> FirstContact.Payload
	1,  // 3: Farm.egg_type:type_name -> EggType
	2,  // 4: Farm.vehicle_types:type_name -> VehicleType
	17, // 5: Farm.researches:type_name -> Research
	20, // 6: Contract.props:type_name -> ContractProperties
	1,  // 7: ContractProperties.egg_type:type_name -> EggType
	21, // 8: ContractProperties.rewards:type_name -> Reward
	50, // 9: ContractProperties.reward_tiers:type_name -> ContractProperties.RewardTier
	4,  // 10: Reward.type:type_name -> RewardType
	24, // 11: ArtifactsDB.inventory_items:type_name -> ArtifactInventoryItem
	26, // 12: ArtifactsDB.inventory_slots:type_name -> InventorySlot
	51, // 13: ArtifactsDB.active_artifacts:type_name -> ArtifactsDB.ActiveArtifactSlot
	52, // 14: ArtifactsDB.active_artifact_sets:type_name -> ArtifactsDB.ActiveArtifactSet
	23, // 15: ArtifactsDB.discovered_artifacts:type_name -> ArtifactSpec
	53, // 16: ArtifactsDB.craftable_artifacts:type_name -> ArtifactsDB.CraftableArtifact
	53, // 17: ArtifactsDB.crafting_counts:type_name -> ArtifactsDB.CraftableArtifact
	27, // 18: ArtifactsDB.mission_infos:type_name -> MissionInfo
	27, // 19: ArtifactsDB.mission_archive:type_name -> MissionInfo
	5,  // 20: ArtifactSpec.name:type_name -> ArtifactSpec.Name
	6,  // 21: ArtifactSpec.level:type_name -> ArtifactSpec.Level
	7,  // 22: ArtifactSpec.rarity:type_name -> ArtifactSpec.Rarity
	1,  // 23: ArtifactSpec.egg:type_name -> EggType
	25, // 24: ArtifactInventoryItem.artifact:type_name -> CompleteArtifact
	23, // 25: CompleteArtifact.spec:type_name -> ArtifactSpec
	23, // 26: CompleteArtifact.stones:type_name -> ArtifactSpec
	9,  // 27: MissionInfo.ship:type_name -> MissionInfo.Spaceship
	10, // 28: MissionInfo.status:type_name -> MissionInfo.Status
	11, // 29: MissionInfo.duration_type:type_name -> MissionInfo.DurationType
	54, // 30: MissionInfo.fuel:type_name -> MissionInfo.Fuel
	55, // 31: CoopStatus.members:type_name -> CoopStatus.Member
	56, // 32: CoopStatus.token_gifts:type_name -> CoopStatus.TokenGift
	14, // 33: GetPeriodicalsRequestPayload.rinfo:type_name -> BasicRequestInfo
	57, // 34: Periodicals.sales:type_name -> Periodicals.Sales
	58, // 35: Periodicals.events:type_name -> Periodicals.Events
	59, // 36: Periodicals.contracts:type_name -> Periodicals.Contracts
	14, // 37: ArtifactsConfigurationRequestPayload.rinfo:type_name -> BasicRequestInfo
	60, // 38: ArtifactsConfigurationResponse.mission_parameters:type_name -> ArtifactsConfigurationResponse.MissionParameters
	61, // 39: ArtifactsConfigurationResponse.artifact_parameters:type_name -> ArtifactsConfigurationResponse.ArtifactParameters
	14, // 40: ConfigRequest.rinfo:type_name -> BasicRequestInfo
	38, // 41: ConfigResponse.live_config:type_name -> LiveConfig
	40, // 42: ConfigResponse.mail_bag:type_name -> MailDB
	42, // 43: ConfigResponse.dlc_catalog:type_name -> DLCCatalog
	63, // 44: LiveConfig.boosts_config:type_name -> LiveConfig.BoostsConfig
	64, // 45: LiveConfig.gift_config:type_name -> LiveConfig.GiftConfig
	65, // 46: LiveConfig.misc_config:type_name -> LiveConfig.MiscConfig
	39, // 47: MailDB.mail:type_name -> InGameMail
	41, // 48: DLCCatalog.items:type_name -> DLCItem
	44, // 49: FirstContact.Payload.settings:type_name -> FirstContact.Payload.Settings
	45, // 50: FirstContact.Payload.stats:type_name -> FirstContact.Payload.Stats
	46, // 51: FirstContact.Payload.progress:type_name -> FirstContact.Payload.Progress
	16, // 52: FirstContact.Payload.farms:type_name -> Farm
	47, // 53: FirstContact.Payload.contracts:type_name -> FirstContact.Payload.Contracts
	48, // 54: FirstContact.Payload.artifacts:type_name -> FirstContact.Payload.Artifacts
	22, // 55: FirstContact.Payload.artifacts_db:type_name -> ArtifactsDB
	18, // 56: FirstContact.Payload.Progress.epic_researches:type_name -> EpicResearch
	3,  // 57: FirstContact.Payload.Progress.farm_trophy_level:type_name -> TrophyType
	49, // 58: FirstContact.Payload.Progress.boosts:type_name -> FirstContact.Payload.Progress.Boost
	19, // 59: FirstContact.Payload.Contracts.active_contracts:type_name -> Contract
	19, // 60: FirstContact.Payload.Contracts.past_contracts:type_name -> Contract
	29, // 61: FirstContact.Payload.Contracts.active_coop_statuses:type_name -> CoopStatus
	24, // 62: FirstContact.Payload.Artifacts.item_being_infused:type_name -> ArtifactInventoryItem
	23, // 63: FirstContact.Payload.Artifacts.spec_being_infused:type_name -> ArtifactSpec
	1,  // 64: FirstContact.Payload.Artifacts.egg_type_infusing:type_name -> EggType
	9,  // 65: FirstContact.Payload.Artifacts.last_fueled_ship:type_name -> MissionInfo.Spaceship
	21, // 66: ContractProperties.RewardTier.rewards:type_name -> Reward
	51, // 67: ArtifactsDB.ActiveArtifactSet.slots:type_name -> ArtifactsDB.ActiveArtifactSlot
	23, // 68: ArtifactsDB.CraftableArtifact.spec:type_name -> ArtifactSpec
	1,  // 69: MissionInfo.Fuel.egg:type_name -> EggType
	32, // 70: Periodicals.Sales.sales:type_name -> Sale
	33, // 71: Periodicals.Events.events:type_name -> Event
	20, // 72: Periodicals.Contracts.contracts:type_name -> ContractProperties
	9,  // 73: ArtifactsConfigurationResponse.MissionParameters.ship:type_name -> MissionInfo.Spaceship
	62, // 74: ArtifactsConfigurationResponse.MissionParameters.durations:type_name -> ArtifactsConfigurationResponse.MissionParameters.Duration
	23, // 75: ArtifactsConfigurationResponse.ArtifactParameters.spec:type_name -> ArtifactSpec
	11, // 76: ArtifactsConfigurationResponse.MissionParameters.Duration.duration_type:type_name -> MissionInfo.DurationType
	66, // 77: LiveConfig.BoostsConfig.item_configs:type_name -> LiveConfig.BoostsConfig.ItemConfig
	67, // 78: LiveConfig.GiftConfig.gift_configs:type_name -> LiveConfig.GiftConfig.GiftValueConfig
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_ei_proto_init() }
func file_ei_proto_init() {
	if File_ei_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ei_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContactRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Farm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Research); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpicResearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventorySlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopStatusRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeriodicalsRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodicals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InGameMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLCCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Contracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Artifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstContact_Payload_Progress_Boost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProperties_RewardTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_ActiveArtifactSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_ActiveArtifactSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_CraftableArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo_Fuel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopStatus_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopStatus_TokenGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodicals_Sales); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodicals_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Periodicals_Contracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_MissionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_ArtifactParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_MissionParameters_Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig_BoostsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig_GiftConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig_MiscConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig_BoostsConfig_ItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveConfig_GiftConfig_GiftValueConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ei_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ei_proto_goTypes,
		DependencyIndexes: file_ei_proto_depIdxs,
		EnumInfos:         file_ei_proto_enumTypes,
		MessageInfos:      file_ei_proto_msgTypes,
	}.Build()
	File_ei_proto = out.File
	file_ei_proto_rawDesc = nil
	file_ei_proto_goTypes = nil
	file_ei_proto_depIdxs = nil
}
